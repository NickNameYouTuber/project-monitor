/**
 * Adaptive WebRTC Hook
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É Mesh P2P –∏ MediaSoup SFU
 * –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è USE_MEDIASOUP
 */

import { useWebRTC } from './useWebRTC';
import { useMediasoupWebRTC } from './useMediasoupWebRTC';
import socketService from '../services/socketService';

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
const USE_MEDIASOUP = process.env.REACT_APP_USE_MEDIASOUP === 'true';

export function useAdaptiveWebRTC(roomId: string, guestName?: string) {
  const socket = socketService.getSocket();
  
  // Get user info (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è MediaSoup)
  const username = guestName || 'User';
  const userId = 'user-' + Date.now(); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ auth

  console.log(`üîß WebRTC Mode: ${USE_MEDIASOUP ? 'MediaSoup SFU' : 'Mesh P2P'}`);

  // –í—ã–∑—ã–≤–∞–µ–º –æ–±–∞ hooks –≤—Å–µ–≥–¥–∞ (–¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª React Hooks)
  const mediasoupResult = useMediasoupWebRTC(socket, roomId, username, userId);
  const meshResult = useWebRTC(roomId, guestName);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  return USE_MEDIASOUP ? mediasoupResult : meshResult;
}

export default useAdaptiveWebRTC;

