import { useState, useEffect, useCallback, useRef } from 'react';
import webrtcService from '../services/webrtcService';
import socketService from '../services/socketService';
import authService from '../services/authService';
import roomService from '../services/roomService';
import { useAuth } from './useAuth';
import { Participant } from '../types/call.types';

export const useWebRTC = (roomId: string, guestName?: string) => {
  const { user } = useAuth();
  const [localStream, setLocalStream] = useState<MediaStream | null>(null);
  const [localScreenStream, setLocalScreenStream] = useState<MediaStream | null>(null);
  const [remoteVideoStreams, setRemoteVideoStreams] = useState<Map<string, MediaStream>>(new Map());
  const [remoteAudioStreams, setRemoteAudioStreams] = useState<Map<string, MediaStream>>(new Map());
  const [remoteScreenStreams, setRemoteScreenStreams] = useState<Map<string, MediaStream>>(new Map());
  const [isCameraEnabled, setIsCameraEnabled] = useState(true);
  const [isMicrophoneEnabled, setIsMicrophoneEnabled] = useState(true);
  const [isScreenSharing, setIsScreenSharing] = useState(false);
  const [participants, setParticipants] = useState<Map<string, Participant>>(new Map());
  const [error, setError] = useState<string | null>(null);
  const [messages, setMessages] = useState<Array<{
    id: string;
    senderId: string;
    senderName: string;
    message: string;
    timestamp: number;
    isOwnMessage?: boolean;
  }>>([]);
  const isInitialized = useRef(false);
  const offersCreated = useRef<Set<string>>(new Set());
  const guestId = useRef<string>(`guest-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`);

  const handleRemoteVideoStream = useCallback((socketId: string, stream: MediaStream) => {
    const mySocketId = socketService.getSocket()?.id;
    if (socketId === mySocketId) {
      return;
    }
    setRemoteVideoStreams((prev) => {
      const next = new Map(prev);
      const normalizedStream = new MediaStream(stream.getVideoTracks());
      next.set(socketId, normalizedStream);
      return next;
    });
    setParticipants((prev) => {
      const next = new Map(prev);
      const participant = next.get(socketId);
      if (participant) {
        participant.hasVideo = stream.getVideoTracks().some((track) => track.enabled);
        next.set(socketId, { ...participant });
      }
      return next;
    });
  }, []);

  const handleRemoteStreamRemoved = useCallback((socketId: string) => {
    setRemoteVideoStreams((prev) => {
      const next = new Map(prev);
      next.delete(socketId);
      return next;
    });
    setRemoteAudioStreams((prev) => {
      const next = new Map(prev);
      next.delete(socketId);
      return next;
    });
    setRemoteScreenStreams((prev) => {
      const next = new Map(prev);
      next.delete(socketId);
      return next;
    });
    setParticipants((prev) => {
      const next = new Map(prev);
      const participant = next.get(socketId);
      if (participant) {
        participant.hasVideo = false;
        participant.hasAudio = false;
        participant.mediaState.screen = false;
        next.set(socketId, { ...participant });
      }
      return next;
    });
  }, []);

  const initializeMedia = useCallback(async () => {
    if (isInitialized.current) return;
    if (!user && !guestName) {
      console.log('User –∏ guestName –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –æ–∂–∏–¥–∞–µ–º...');
      return;
    }
    
    isInitialized.current = true;
    const displayName = user?.username || guestName || '–ì–æ—Å—Ç—å';
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', displayName);

    try {
      const stream = await webrtcService.initializeLocalStream();
      setLocalStream(stream);
      const videoTracks = stream.getVideoTracks();
      const audioTracks = stream.getAudioTracks();
      setIsCameraEnabled(videoTracks.length > 0 && videoTracks[0].enabled);
      setIsMicrophoneEnabled(audioTracks.length > 0 && audioTracks[0].enabled);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–µ–¥–∏–∞:', error);
      setLocalStream(new MediaStream());
      setIsCameraEnabled(false);
      setIsMicrophoneEnabled(false);
    }

    webrtcService.onRemoteVideoStream(handleRemoteVideoStream);
    webrtcService.onRemoteAudioStream((socketId, stream) => {
      setRemoteAudioStreams((prev) => {
        const next = new Map(prev);
        const normalizedStream = new MediaStream(stream.getAudioTracks());
        next.set(socketId, normalizedStream);
        return next;
      });
      setParticipants((prev) => {
        const next = new Map(prev);
        const participant = next.get(socketId);
        if (participant) {
          participant.hasAudio = stream.getAudioTracks().some((track) => track.enabled);
          next.set(socketId, { ...participant });
        }
        return next;
      });
    });
    webrtcService.onRemoteScreenStream((socketId, stream) => {
      setRemoteScreenStreams((prev) => {
        const next = new Map(prev);
        const normalizedStream = new MediaStream(stream.getVideoTracks());
        next.set(socketId, normalizedStream);
        return next;
      });
      setParticipants((prev) => {
        const next = new Map(prev);
        const participant = next.get(socketId);
        if (participant) {
          participant.mediaState.screen = stream.getVideoTracks().length > 0;
          next.set(socketId, { ...participant });
        }
        return next;
      });
    });
    webrtcService.onRemoteStreamRemoved(handleRemoteStreamRemoved);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤
    webrtcService.onLocalStreamUpdated(() => {
      const currentStream = webrtcService.getLocalStream();
      if (currentStream) {
        setLocalStream(new MediaStream(currentStream.getTracks()));
      }
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT —Ç–æ–∫–µ–Ω PM –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const token = authService.getToken();
    const isGuest = !user || !token;
    const userIdToUse = user?.id || guestId.current;
    const usernameToUse = user?.username || guestName || 'Guest';

    console.log('üîç WebRTC –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:', {
      hasToken: !!token,
      isGuest,
      userId: userIdToUse,
      username: usernameToUse,
      roomId
    });

    if (token || isGuest) {
      console.log(`‚úÖ –£—Å–ª–æ–≤–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Socket.IO (${isGuest ? '–≥–æ—Å—Ç–µ–≤–æ–π —Ä–µ–∂–∏–º' : '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å PM'})`);
      const socket = isGuest ? socketService.connectAsGuest() : socketService.connect(token!);
      
      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ (socketService –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏)
      console.log('üîå –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ:', roomId);
      socketService.joinRoom(roomId, {
        userId: userIdToUse,
        username: usernameToUse,
      });
      (window as any).__NIM_CURRENT_ROOM_ID__ = roomId;

      socket.on('reconnect', () => {
        console.log('–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ reconnect ‚Äî –æ—á–∏—â–∞—é —Å—Ç–∞—Ä—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');
        offersCreated.current.clear();
        
        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º
        webrtcService.cleanupRemoteConnections();
        
        // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø–æ—Ç–æ–∫–æ–≤
        setParticipants(new Map());
        setRemoteVideoStreams(new Map());
        setRemoteAudioStreams(new Map());
        setRemoteScreenStreams(new Map());
        
        console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã, –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤');
        // socketService –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç join-room
      });

      socket.on('join-timeout', (data) => {
        console.error('‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', data);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
      });
    } else {
      console.error('‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∏ –Ω–µ –≥–æ—Å—Ç—å');
      console.log('üîç –î–µ—Ç–∞–ª–∏:', { token: !!token, user: !!user, isGuest });
    }

    socketService.onUserJoined(({ participant }) => {
      const mySocketId = socketService.getSocket()?.id;
      if (participant.socketId === mySocketId) {
        console.log('–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ —Å–∞–º–æ–º —Å–µ–±–µ');
        return;
      }

      console.log('–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', participant);

      setParticipants((prev) => {
        const newParticipants = new Map(prev);
        
        // –í–ê–ñ–ù–û: –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ socketId —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ userId)
        // –≠—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å –Ω–æ–≤—ã–º socketId
        const entriesToCheck = Array.from(newParticipants.entries());
        let removedOldSockets = 0;
        entriesToCheck.forEach(([socketId, p]) => {
          if (p.userId === participant.userId && socketId !== participant.socketId) {
            console.log(`üßπ –£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π socketId ${socketId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${p.username} (–Ω–æ–≤—ã–π: ${participant.socketId})`);
            newParticipants.delete(socketId);
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ä—ã–º socketId
            webrtcService.closeConnection(socketId);
            removedOldSockets++;
          }
        });
        
        if (!newParticipants.has(participant.socketId)) {
          newParticipants.set(participant.socketId, participant);
          console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ ${participant.username} (${participant.socketId}), —É–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö: ${removedOldSockets}`);
        } else {
          console.log('–£—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ:', participant.socketId);
        }
        
        console.log('üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ map –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', newParticipants.size, 'socketIds:', Array.from(newParticipants.keys()));
        return newParticipants;
      });

      // –ö–∞–∫ –°–¢–ê–†–´–ô —É—á–∞—Å—Ç–Ω–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º offers –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
      console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é offers –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:', participant.socketId);
      webrtcService.createOffer(participant.socketId, 'video');
      webrtcService.createOffer(participant.socketId, 'audio');
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ 500–º—Å –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç—Ä–µ–∫–æ–≤
      setTimeout(() => {
        console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–æ–≤ –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:', participant.socketId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
        const pcVideo = webrtcService.getPeerConnection(participant.socketId, 'video');
        if (pcVideo && pcVideo.connectionState !== 'closed' && pcVideo.connectionState !== 'failed') {
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫
          const localStream = webrtcService.getLocalStream();
          if (localStream) {
            const videoTrack = localStream.getVideoTracks()[0];
            if (videoTrack && videoTrack.enabled) {
              console.log('üìπ –§–æ—Ä—Å–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞');
              const sender = pcVideo.getSenders().find(s => s.track?.kind === 'video');
              if (sender && sender.track !== videoTrack) {
                sender.replaceTrack(videoTrack).catch(e => console.error('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞:', e));
              } else if (sender && sender.track === videoTrack) {
                // –¢—Ä–µ–∫ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π offer –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
                webrtcService.createOffer(participant.socketId, 'video');
              }
            }
          }
        }
      }, 500);
      
      // –ï—Å–ª–∏ —É –Ω–∞—Å –∞–∫—Ç–∏–≤–µ–Ω screen share, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º screen offer
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø—Ä—è–º—É—é –≤ webrtcService, –∞ –Ω–µ —á–µ—Ä–µ–∑ state (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∑–∞–ø–∞–∑–¥—ã–≤–∞—Ç—å)
      const hasScreenStream = webrtcService.getLocalScreenStream();
      if (hasScreenStream || isScreenSharing) {
        console.log('üì∫ –û—Ç–ø—Ä–∞–≤–ª—è—é screen offer –Ω–æ–≤–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É:', participant.socketId, '(hasScreenStream:', !!hasScreenStream, 'isScreenSharing:', isScreenSharing, ')');
        webrtcService.createOffer(participant.socketId, 'screen');
      }
    });

    socketService.onExistingParticipants(({ participants }) => {
      const mySocketId = socketService.getSocket()?.id;
      console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', participants, '–ú–æ–π socketId:', mySocketId);

      // –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏ –ø–æ userId - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω socketId –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userIdToParticipant = new Map<string, typeof participants[0]>();
      participants.forEach((p) => {
        if (p.socketId !== mySocketId) {
          // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º userId, –æ—Å—Ç–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –Ω–æ–≤—ã–π (–ø–æ socketId)
          const existing = userIdToParticipant.get(p.userId);
          if (!existing || p.socketId > existing.socketId) {
            userIdToParticipant.set(p.userId, p);
          }
        }
      });

      // –í–ê–ñ–ù–û: –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∞ –Ω–µ –¥–æ–ø–æ–ª–Ω—è–µ–º
      setParticipants(() => {
        const newParticipants = new Map();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        userIdToParticipant.forEach((p) => {
          newParticipants.set(p.socketId, p);
        });
        
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–µ–Ω, –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä:', newParticipants.size);
        return newParticipants;
      });

      // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ screen sharing –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const uniqueParticipants = Array.from(userIdToParticipant.values());
      uniqueParticipants.forEach((existingParticipant: any) => {
        if (existingParticipant.socketId === mySocketId) return;
        const hasScreenFlag = !!existingParticipant.mediaState?.screen;
        const screenStreamId = existingParticipant.screenStreamId as string | undefined;
        if (hasScreenFlag || screenStreamId) {
          console.log('–£—á–∞—Å—Ç–Ω–∏–∫', existingParticipant.socketId, '—É–∂–µ —Å—Ç—Ä–∏–º–∏—Ç —ç–∫—Ä–∞–Ω (–ø–æ –¥–∞–Ω–Ω—ã–º existing-participants)');
          webrtcService.markPeerExpectsScreen(existingParticipant.socketId);
          if (screenStreamId) {
            webrtcService.setAnnouncedScreenStreamId(existingParticipant.socketId, screenStreamId);
          }
        }
      });

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã screen-share-started —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è
      setTimeout(() => {
        uniqueParticipants.forEach((existingParticipant: any) => {
          if (existingParticipant.socketId !== mySocketId && !offersCreated.current.has(existingParticipant.socketId)) {
            console.log('–°–æ–∑–¥–∞—é offer –¥–ª—è:', existingParticipant.socketId);
            offersCreated.current.add(existingParticipant.socketId);
            webrtcService.createOffer(existingParticipant.socketId, 'video');
            webrtcService.createOffer(existingParticipant.socketId, 'audio');
            
            // –ï—Å–ª–∏ —É –ù–ê–° –∞–∫—Ç–∏–≤–µ–Ω screen share, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º screen offer
            const hasScreenStream = webrtcService.getLocalScreenStream();
            if (hasScreenStream || isScreenSharing) {
              console.log('üì∫ –û—Ç–ø—Ä–∞–≤–ª—è—é screen offer —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É (–º–æ–π screen):', existingParticipant.socketId, '(hasScreenStream:', !!hasScreenStream, ')');
              webrtcService.createOffer(existingParticipant.socketId, 'screen');
            }
          }
        });
      }, 150);
    });

    socketService.onReceiveOffer(async ({ from, offer, connectionType }) => {
      const mySocketId = socketService.getSocket()?.id;
      if (from === mySocketId) {
        return;
      }
      await webrtcService.handleOffer(from, offer, connectionType);
    });

    socketService.onReceiveAnswer(async ({ from, answer, connectionType }) => {
      const mySocketId = socketService.getSocket()?.id;
      if (from === mySocketId) {
        return;
      }
      await webrtcService.handleAnswer(from, answer, connectionType);
    });

    socketService.onReceiveIceCandidate(async ({ from, candidate, connectionType }) => {
      await webrtcService.handleIceCandidate(from, candidate, connectionType);
    });

    socketService.onUserLeft(({ socketId }) => {
      console.log('–£—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É:', socketId);
      webrtcService.closeConnection(socketId);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ participants
      setParticipants((prev) => {
        const newParticipants = new Map(prev);
        newParticipants.delete(socketId);
        console.log('üìä –£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å:', newParticipants.size);
        return newParticipants;
      });
      
      // –£–¥–∞–ª—è–µ–º streams (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ closeConnection –Ω–µ –æ–±–Ω–æ–≤–∏–ª state)
      setRemoteVideoStreams((prev) => {
        const next = new Map(prev);
        next.delete(socketId);
        return next;
      });
      setRemoteAudioStreams((prev) => {
        const next = new Map(prev);
        next.delete(socketId);
        return next;
      });
      setRemoteScreenStreams((prev) => {
        const next = new Map(prev);
        next.delete(socketId);
        return next;
      });
      
      webrtcService.clearAnnouncedScreenStreamId(socketId);
    });

    socketService.onMediaToggled(({ socketId, mediaType, enabled }) => {
      setParticipants((previous) => {
        const next = new Map(previous);
        const participant = next.get(socketId);
        if (participant) {
          participant.mediaState[mediaType as keyof typeof participant.mediaState] = enabled;
          if (mediaType === 'camera') {
            participant.hasVideo = enabled;
          }
          if (mediaType === 'microphone') {
            participant.hasAudio = enabled;
          }
          next.set(socketId, { ...participant });
        }
        return next;
      });
    });

    // –≠–∫—Ä–∞–Ω: —Å–∏–≥–Ω–∞–ª –æ —Ç–æ–º, —á—Ç–æ —É —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å/–∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    socketService.onScreenShareStarted(({ socketId, screenStreamId }) => {
      console.log('screen-share-started –æ—Ç', socketId, 'streamId:', screenStreamId);
      webrtcService.setAnnouncedScreenStreamId(socketId, screenStreamId);
      webrtcService.markPeerExpectsScreen(socketId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º mediaState.screen –≤ participants
      setParticipants((prev) => {
        const next = new Map(prev);
        const participant = next.get(socketId);
        if (participant) {
          participant.mediaState.screen = true;
          next.set(socketId, { ...participant });
        }
        return next;
      });
      
      // –ù–ï —Å–æ–∑–¥–∞–µ–º offer –∑–¥–µ—Å—å! –ñ–¥–µ–º –≤—Ö–æ–¥—è—â–∏–π offer –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –Ω–∞—á–∞–ª screen share
      // –û–Ω —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç offer —á–µ—Ä–µ–∑ startScreenShare() ‚Üí createOffer('screen')
    });

    socketService.onScreenShareStopped(({ socketId }) => {
      console.log('screen-share-stopped –æ—Ç', socketId);
      webrtcService.clearAnnouncedScreenStreamId(socketId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º mediaState.screen –≤ participants
      setParticipants((prev) => {
        const next = new Map(prev);
        const participant = next.get(socketId);
        if (participant) {
          participant.mediaState.screen = false;
          next.set(socketId, { ...participant });
        }
        return next;
      });
      
      setRemoteScreenStreams((prev) => {
        const next = new Map(prev);
        next.delete(socketId);
        return next;
      });
    });

    socketService.onRoomNotFound(async ({ roomId }) => {
      console.error('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', roomId);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      try {
        console.log('–ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:', roomId);
        const response = await roomService.createRoom({
          isStatic: true,
          customId: roomId,
          name: `–ö–æ–º–Ω–∞—Ç–∞ ${roomId}`
        });
        console.log('–ö–æ–º–Ω–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', response);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞
        setTimeout(() => {
          socketService.joinRoom(roomId, {
            userId: userIdToUse,
            username: usernameToUse,
          });
        }, 1000);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', error);
        setError(`–ö–æ–º–Ω–∞—Ç–∞ "${roomId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞. ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    });

    socketService.onRoomError(({ message }) => {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–º–Ω–∞—Ç—ã:', message);
      setError(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ: ${message}`);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
    const socket = socketService.getSocket();
    if (socket) {
      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
      socket.on('chat-history', (data: {
        messages: Array<{
          id: string;
          senderId: string;
          senderName: string;
          message: string;
          timestamp: number;
          fileUrl?: string;
          fileName?: string;
          fileType?: string;
        }>;
      }) => {
        console.log('üìú –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:', data.messages.length, '—Å–æ–æ–±—â–µ–Ω–∏–π');
        const mySocketId = socket.id;
        setMessages(data.messages.map(msg => ({
          ...msg,
          isOwnMessage: msg.senderId === mySocketId,
        })));
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      socket.on('chat-message', (data: {
        id: string;
        senderId: string;
        senderName: string;
        message: string;
        timestamp: number;
        fileUrl?: string;
        fileName?: string;
        fileType?: string;
      }) => {
        console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Ç–∞:', data);
        const mySocketId = socket.id;
        setMessages((prev) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
          const exists = prev.some(msg => msg.id === data.id);
          if (exists) {
            return prev;
          }
          return [
            ...prev,
            {
              ...data,
              isOwnMessage: data.senderId === mySocketId,
            },
          ];
        });
      });
    }
  }, [roomId, user, guestName, handleRemoteVideoStream, handleRemoteStreamRemoved]);

  const toggleCamera = useCallback(async () => {
    const enabled = await webrtcService.toggleCamera();
    setIsCameraEnabled(enabled);
    socketService.toggleMedia(roomId, 'camera', enabled);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    const currentStream = webrtcService.getLocalStream();
    if (currentStream) {
      setLocalStream(new MediaStream(currentStream.getTracks()));
    } else {
      setLocalStream(new MediaStream());
    }
  }, [roomId]);

  const toggleMicrophone = useCallback(async () => {
    const enabled = await webrtcService.toggleMicrophone();
    setIsMicrophoneEnabled(enabled);
    socketService.toggleMedia(roomId, 'microphone', enabled);
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –ø–æ—Å–ª–µ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    const currentStream = webrtcService.getLocalStream();
    if (currentStream) {
      setLocalStream(new MediaStream(currentStream.getTracks()));
    } else {
      setLocalStream(new MediaStream());
    }
  }, [roomId]);

  const toggleScreenShare = useCallback(async () => {
    if (isScreenSharing) {
      webrtcService.stopScreenShare();
      setIsScreenSharing(false);
      setLocalScreenStream(null);
      socketService.toggleMedia(roomId, 'screen', false);
    } else {
      const success = await webrtcService.startScreenShare();
      if (success) {
        setIsScreenSharing(true);
        setLocalScreenStream(webrtcService.getLocalScreenStream());
        socketService.toggleMedia(roomId, 'screen', true);
      }
    }
  }, [isScreenSharing, roomId]);

  const sendMessage = useCallback(async (message: string, file?: File) => {
    const socket = socketService.getSocket();
    if (socket && (message.trim() || file)) {
      const timestamp = Date.now();
      
      let fileData = null;
      if (file) {
        try {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ base64
          const reader = new FileReader();
          const base64 = await new Promise<string>((resolve, reject) => {
            reader.onload = () => {
              const result = reader.result as string;
              // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:type;base64,
              const base64Data = result.split(',')[1];
              resolve(base64Data);
            };
            reader.onerror = reject;
            reader.readAsDataURL(file);
          });
          
          fileData = {
            name: file.name,
            type: file.type,
            size: file.size,
            data: base64,
          };
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error);
          return;
        }
      }
      
      socket.emit('chat-message', {
        roomId,
        message: message.trim(),
        timestamp,
        file: fileData,
      });
      console.log('üí¨ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message, file ? `—Å —Ñ–∞–π–ª–æ–º ${file.name}` : '');
    }
  }, [roomId]);

  const cleanup = useCallback(() => {
    socketService.leaveRoom(roomId);
    socketService.offAllListeners();
    socketService.disconnect();
    webrtcService.cleanup();
    isInitialized.current = false;
    offersCreated.current.clear();
    setMessages([]);
  }, [roomId]);

  useEffect(() => {
    return () => {
      cleanup();
    };
  }, [cleanup]);

  return {
    localStream,
    localScreenStream,
    remoteVideoStreams,
    remoteAudioStreams,
    remoteScreenStreams,
    isCameraEnabled,
    isMicrophoneEnabled,
    isScreenSharing,
    participants,
    error,
    messages,
    toggleCamera,
    toggleMicrophone,
    toggleScreenShare,
    initializeMedia,
    cleanup,
    sendMessage,
  };
};

