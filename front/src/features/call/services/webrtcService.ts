import { ICE_SERVERS } from '../utils/constants';
import socketService, { ConnectionType } from './socketService';

// RTC –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RTC_CONFIG = {
  iceServers: ICE_SERVERS
};

// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_MEDIA_CONSTRAINTS = {
  audio: true,
  video: {
    width: { ideal: 1280 },
    height: { ideal: 720 },
    facingMode: 'user'
  }
};

interface PeerConnectionBundle {
  audio: RTCPeerConnection;
  video: RTCPeerConnection;
  screen?: RTCPeerConnection; // –û—Ç–¥–µ–ª—å–Ω—ã–π peer connection –¥–ª—è screen share
}

export type RemoteStreamType = 'audio' | 'video' | 'screen';

class WebRTCService {
  private peerConnections: Map<string, PeerConnectionBundle> = new Map();

  private localAudioStream: MediaStream | null = null;
  private localVideoStream: MediaStream | null = null;
  private localCompositeStream: MediaStream | null = null;
  private localAudioTrack: MediaStreamTrack | null = null;
  private localVideoTrack: MediaStreamTrack | null = null;
  private screenStream: MediaStream | null = null;

  private remoteVideoStreams: Map<string, MediaStream> = new Map();
  private remoteAudioStreams: Map<string, MediaStream> = new Map();
  private remoteScreenStreams: Map<string, MediaStream> = new Map();
  private remoteSocketIdToScreenStreamId: Map<string, string> = new Map();
  private peersExpectingScreen: Set<string> = new Set();

  private onRemoteVideoStreamCallback: ((socketId: string, stream: MediaStream) => void) | null = null;
  private onRemoteAudioStreamCallback: ((socketId: string, stream: MediaStream) => void) | null = null;
  private onRemoteScreenStreamCallback: ((socketId: string, stream: MediaStream) => void) | null = null;
  private onRemoteStreamRemovedCallback: ((socketId: string) => void) | null = null;
  private onLocalStreamUpdatedCallback: (() => void) | null = null;

  async initializeLocalStream(): Promise<MediaStream> {
    const compositeStream = new MediaStream();

    try {
      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: DEFAULT_MEDIA_CONSTRAINTS.audio || true });
      this.localAudioStream = audioStream;
      this.localAudioTrack = audioStream.getAudioTracks()[0] || null;
      if (this.localAudioTrack) {
        compositeStream.addTrack(this.localAudioTrack);
      }
      console.log('–ê—É–¥–∏–æ –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (audioError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:', audioError);
      this.localAudioStream = new MediaStream();
      this.localAudioTrack = null;
    }

    try {
      const videoStream = await navigator.mediaDevices.getUserMedia({ video: DEFAULT_MEDIA_CONSTRAINTS.video || true });
      this.localVideoStream = videoStream;
      this.localVideoTrack = videoStream.getVideoTracks()[0] || null;
      if (this.localVideoTrack) {
        compositeStream.addTrack(this.localVideoTrack);
      }
      console.log('–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    } catch (videoError) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ—Ç–æ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–∞–º–µ—Ä—ã:', videoError);
      this.localVideoStream = new MediaStream();
      this.localVideoTrack = null;
    }

    this.localCompositeStream = compositeStream;
    if (this.onLocalStreamUpdatedCallback) {
      this.onLocalStreamUpdatedCallback();
    }

    return compositeStream;
  }

  getLocalStream(): MediaStream | null {
    return this.localCompositeStream;
  }

  getLocalVideoStream(): MediaStream | null {
    return this.localVideoStream;
  }

  getLocalAudioStream(): MediaStream | null {
    return this.localAudioStream;
  }

  getRemoteVideoStreams(): Map<string, MediaStream> {
    return this.remoteVideoStreams;
  }

  getRemoteAudioStreams(): Map<string, MediaStream> {
    return this.remoteAudioStreams;
  }

  getRemoteScreenStreams(): Map<string, MediaStream> {
    return this.remoteScreenStreams;
  }

  getLocalScreenStream(): MediaStream | null {
    return this.screenStream;
  }

  private ensureCompositeStream(): void {
    if (!this.localCompositeStream) {
      this.localCompositeStream = new MediaStream();
    }

    const compositeTracks = this.localCompositeStream.getTracks();
    if (this.localAudioTrack && !compositeTracks.includes(this.localAudioTrack)) {
      this.localCompositeStream.addTrack(this.localAudioTrack);
    }
    if (this.localVideoTrack && !compositeTracks.includes(this.localVideoTrack)) {
      this.localCompositeStream.addTrack(this.localVideoTrack);
    }
  }

  private createPeerConnection(remoteSocketId: string, connectionType: ConnectionType): RTCPeerConnection {
    const peerConnection = new RTCPeerConnection(RTC_CONFIG);

    peerConnection.onicecandidate = (event) => {
      if (event.candidate) {
        const candidate = event.candidate;
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log(`üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç (${connectionType}) –¥–ª—è ${remoteSocketId}:`, {
          type: candidate.type, // host/srflx/relay
          protocol: candidate.protocol, // udp/tcp
          address: candidate.address,
          port: candidate.port,
          priority: candidate.priority
        });
        socketService.sendIceCandidate(remoteSocketId, candidate.toJSON(), connectionType);
      } else {
        console.log(`‚úÖ ICE gathering –∑–∞–≤–µ—Ä—à–µ–Ω (${connectionType}) –¥–ª—è ${remoteSocketId}`);
      }
    };

    peerConnection.onicegatheringstatechange = () => {
      console.log(`üîç ICE gathering state (${connectionType}) –¥–ª—è ${remoteSocketId}:`, peerConnection.iceGatheringState);
    };

    peerConnection.oniceconnectionstatechange = () => {
      console.log(`üîó ICE connection state (${connectionType}) –¥–ª—è ${remoteSocketId}:`, peerConnection.iceConnectionState);
      if (peerConnection.iceConnectionState === 'failed') {
        console.error(`‚ùå ICE connection failed (${connectionType}) –¥–ª—è ${remoteSocketId} - –ø—Ä–æ–±—É–µ–º ICE restart`);
        this.createOffer(remoteSocketId, connectionType, { iceRestart: true })
          .catch((error) => console.warn(`ICE restart (${connectionType}) –¥–ª—è ${remoteSocketId} –Ω–µ —É–¥–∞–ª—Å—è:`, error));
      }
    };

    peerConnection.onconnectionstatechange = () => {
      console.log(`üì° Connection state (${connectionType}) –¥–ª—è ${remoteSocketId}:`, peerConnection.connectionState);
      if (peerConnection.connectionState === 'failed') {
        console.error(`‚ùå Connection failed (${connectionType}) –¥–ª—è ${remoteSocketId}`);
        // –ü—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        setTimeout(() => {
          if (peerConnection.connectionState === 'failed') {
            console.log(`üîÑ –ü—ã—Ç–∞—é—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å (${connectionType}) –∫ ${remoteSocketId}`);
            this.createOffer(remoteSocketId, connectionType, { iceRestart: true })
              .catch((error) => console.warn(`–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:`, error));
          }
        }, 2000);
      }
    };

    if (connectionType === 'video') {
      peerConnection.ontrack = (event) => {
        const [incomingStream] = event.streams;
        const track = event.track;
        if (!incomingStream || track.kind !== 'video') {
          return;
        }

        // Video connection —Ç–æ–ª—å–∫–æ –¥–ª—è –ö–ê–ú–ï–†–´
        let videoStream = this.remoteVideoStreams.get(remoteSocketId);
        if (!videoStream) {
          videoStream = new MediaStream();
          this.remoteVideoStreams.set(remoteSocketId, videoStream);
        }
        videoStream.getVideoTracks().forEach((videoTrack) => videoStream!.removeTrack(videoTrack));
        videoStream.addTrack(track);
        if (this.onRemoteVideoStreamCallback) {
          this.onRemoteVideoStreamCallback(remoteSocketId, videoStream);
        }
      };
    }

    if (connectionType === 'audio') {
      peerConnection.ontrack = (event) => {
        const [incomingStream] = event.streams;
        const track = event.track;
        if (!incomingStream || track.kind !== 'audio') {
          return;
        }

        let audioStream = this.remoteAudioStreams.get(remoteSocketId);
        if (!audioStream) {
          audioStream = new MediaStream();
          this.remoteAudioStreams.set(remoteSocketId, audioStream);
        }
        audioStream.getAudioTracks().forEach((audioTrack) => audioStream!.removeTrack(audioTrack));
        audioStream.addTrack(track);
        if (this.onRemoteAudioStreamCallback) {
          this.onRemoteAudioStreamCallback(remoteSocketId, audioStream);
        }
      };
    }

    if (connectionType === 'screen') {
      peerConnection.ontrack = (event) => {
        const [incomingStream] = event.streams;
        const track = event.track;
        if (!incomingStream || track.kind !== 'video') {
          return;
        }

        console.log(`üì∫ –ü–æ–ª—É—á–µ–Ω screen track –æ—Ç ${remoteSocketId}`);
        let screenStream = this.remoteScreenStreams.get(remoteSocketId);
        if (!screenStream) {
          screenStream = new MediaStream();
          this.remoteScreenStreams.set(remoteSocketId, screenStream);
        }
        screenStream.getVideoTracks().forEach((videoTrack) => screenStream!.removeTrack(videoTrack));
        screenStream.addTrack(track);
        if (this.onRemoteScreenStreamCallback) {
          this.onRemoteScreenStreamCallback(remoteSocketId, screenStream);
        }
      };
    }

    return peerConnection;
  }

  getPeerConnection(remoteSocketId: string, connectionType: ConnectionType): RTCPeerConnection {
    let bundle = this.peerConnections.get(remoteSocketId);
    if (!bundle) {
      bundle = {
        audio: this.createPeerConnection(remoteSocketId, 'audio'),
        video: this.createPeerConnection(remoteSocketId, 'video')
      };
      this.peerConnections.set(remoteSocketId, bundle);
    }

    // –°–æ–∑–¥–∞–µ–º screen connection –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
    if (connectionType === 'screen') {
      if (!bundle.screen) {
        bundle.screen = this.createPeerConnection(remoteSocketId, 'screen');
        this.peerConnections.set(remoteSocketId, bundle);
      }
      return bundle.screen;
    }

    if (!bundle[connectionType]) {
      bundle[connectionType] = this.createPeerConnection(remoteSocketId, connectionType);
    }

    return bundle[connectionType];
  }

  private async ensureLocalTrackAttached(remoteSocketId: string, connectionType: ConnectionType): Promise<void> {
    const peerConnection = this.getPeerConnection(remoteSocketId, connectionType);
    if (connectionType === 'audio') {
      if (this.localAudioTrack) {
        const existingSender = peerConnection.getSenders().find((sender) => sender.track?.kind === 'audio');
        if (!existingSender) {
          peerConnection.addTrack(this.localAudioTrack, this.localAudioStream || new MediaStream([this.localAudioTrack]));
        } else if (existingSender.track !== this.localAudioTrack) {
          await existingSender.replaceTrack(this.localAudioTrack);
        }
      } else if (!peerConnection.getTransceivers().some((tr) => tr.receiver.track?.kind === 'audio')) {
        peerConnection.addTransceiver('audio', { direction: 'recvonly' });
      }
    }

    if (connectionType === 'video') {
      if (this.localVideoTrack) {
        const videoSenders = peerConnection.getSenders().filter((sender) => sender.track?.kind === 'video');
        const cameraSender = videoSenders.find((sender) => sender.track?.id === this.localVideoTrack?.id);
        if (!cameraSender) {
          peerConnection.addTrack(this.localVideoTrack, this.localVideoStream || new MediaStream([this.localVideoTrack]));
        }
      } else if (!peerConnection.getTransceivers().some((tr) => tr.receiver.track?.kind === 'video')) {
        peerConnection.addTransceiver('video', { direction: 'recvonly' });
      }
    }

    // Screen sharing –∏–¥–µ—Ç —á–µ—Ä–µ–∑ –û–¢–î–ï–õ–¨–ù–´–ô peer connection
    if (connectionType === 'screen') {
      if (this.screenStream) {
        const screenTrack = this.screenStream.getVideoTracks()[0];
        if (screenTrack) {
          const existingSender = peerConnection.getSenders().find((sender) => sender.track?.kind === 'video');
          if (!existingSender) {
            peerConnection.addTrack(screenTrack, this.screenStream);
            console.log(`üì∫ –î–æ–±–∞–≤–ª–µ–Ω screen track –¥–ª—è ${remoteSocketId}`);
          } else if (existingSender.track !== screenTrack) {
            await existingSender.replaceTrack(screenTrack);
            console.log(`üì∫ –ó–∞–º–µ–Ω–µ–Ω screen track –¥–ª—è ${remoteSocketId}`);
          }
        }
      } else if (!peerConnection.getTransceivers().some((tr) => tr.receiver.track?.kind === 'video')) {
        peerConnection.addTransceiver('video', { direction: 'recvonly' });
      }
    }
  }

  async createOffer(remoteSocketId: string, connectionType: ConnectionType, options?: RTCOfferOptions): Promise<void> {
    const peerConnection = this.getPeerConnection(remoteSocketId, connectionType);

    await this.ensureLocalTrackAttached(remoteSocketId, connectionType);

    try {
      const currentState = peerConnection.signalingState;
      if (currentState === 'stable') {
        const offer = await peerConnection.createOffer(options);
        await peerConnection.setLocalDescription(offer);
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é offer (${connectionType}) –∫ ${remoteSocketId}`);
        socketService.sendOffer(remoteSocketId, offer, connectionType);
      } else {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ offer (${connectionType}) –¥–ª—è ${remoteSocketId}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentState}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer (${connectionType}) –¥–ª—è ${remoteSocketId}:`, error);
    }
  }

  async handleOffer(remoteSocketId: string, offer: RTCSessionDescriptionInit, connectionType: ConnectionType): Promise<void> {
    const peerConnection = this.getPeerConnection(remoteSocketId, connectionType);

    try {
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω offer (${connectionType}) –æ—Ç ${remoteSocketId}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${peerConnection.signalingState}`);
      
      // Perfect Negotiation: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º "glare" (–æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ offer)
      const mySocketId = socketService.getSocket()?.id || '';
      const isPolite = mySocketId < remoteSocketId; // –ú–µ–Ω—å—à–∏–π socketId = polite peer
      const isGlare = peerConnection.signalingState === 'have-local-offer';
      
      if (isGlare && !isPolite) {
        // Impolite peer –ø—Ä–∏ glare: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π offer, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–≤–æ–∏–º
        console.warn(`‚ö†Ô∏è Impolite peer (glare): –∏–≥–Ω–æ—Ä–∏—Ä—É—é offer (${connectionType}) –æ—Ç ${remoteSocketId}, —É –º–µ–Ω—è —Å–≤–æ–π offer (myId: ${mySocketId})`);
        return;
      }
      
      // Polite peer –ø—Ä–∏ glare: –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å–≤–æ–π offer
      if (isGlare && isPolite) {
        console.log(`üîÑ Polite peer (glare): –æ—Ç–∫–∞—Ç—ã–≤–∞—é —Å–≤–æ–π offer (${connectionType}), –ø—Ä–∏–Ω–∏–º–∞—é –æ—Ç ${remoteSocketId} (myId: ${mySocketId})`);
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π offer —á–µ—Ä–µ–∑ rollback
        await peerConnection.setLocalDescription({ type: 'rollback' } as RTCSessionDescriptionInit);
      }
      
      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));
      await this.ensureLocalTrackAttached(remoteSocketId, connectionType);
      const answer = await peerConnection.createAnswer();
      await peerConnection.setLocalDescription(answer);
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é answer (${connectionType}) –∫ ${remoteSocketId}`);
      socketService.sendAnswer(remoteSocketId, answer, connectionType);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer (${connectionType}) –æ—Ç ${remoteSocketId}:`, error);
    }
  }

  async handleAnswer(remoteSocketId: string, answer: RTCSessionDescriptionInit, connectionType: ConnectionType): Promise<void> {
    const peerConnection = this.getPeerConnection(remoteSocketId, connectionType);
    try {
      const currentState = peerConnection.signalingState;
      console.log(`üì• –ü–æ–ª—É—á–µ–Ω answer (${connectionType}) –æ—Ç ${remoteSocketId}, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${currentState}`);
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º answer —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ offer
      if (currentState === 'have-local-offer') {
        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
        console.log(`‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω answer (${connectionType}) –æ—Ç ${remoteSocketId}`);
      } else if (currentState === 'stable') {
        console.warn(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º answer (${connectionType}) –æ—Ç ${remoteSocketId}, —É–∂–µ –≤ stable (–≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª glare –∏ –º—ã polite peer)`);
      } else {
        console.warn(`‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "${currentState}" –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ answer (${connectionType}) –æ—Ç ${remoteSocketId}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ answer (${connectionType}) –æ—Ç ${remoteSocketId}:`, error);
    }
  }

  async handleIceCandidate(remoteSocketId: string, candidate: RTCIceCandidateInit, connectionType: ConnectionType): Promise<void> {
    const peerConnection = this.getPeerConnection(remoteSocketId, connectionType);
    try {
      await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (${connectionType}) –æ—Ç ${remoteSocketId}:`, error);
    }
  }

  async toggleCamera(): Promise<boolean> {
    // –§–∏–∑–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    if (this.localVideoTrack && this.localVideoStream) {
      console.log('–§–∏–∑–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É (track.stop)');
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –≤–∏–¥–µ–æ
      this.localVideoStream.getTracks().forEach(track => track.stop());
      this.localVideoTrack = null;
      this.localVideoStream = null;
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      if (this.localCompositeStream) {
        this.localCompositeStream.getVideoTracks().forEach(track => {
          this.localCompositeStream!.removeTrack(track);
          track.stop();
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º replaceTrack(null) –≤–º–µ—Å—Ç–æ removeTrack - —ç—Ç–æ –ù–ï —Ç—Ä–µ–±—É–µ—Ç renegotiation!
      // –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç connecting
      const peerEntries = Array.from(this.peerConnections.entries());
      for (let index = 0; index < peerEntries.length; index++) {
        const [socketId, bundle] = peerEntries[index];
        if (bundle.video) {
          const senders = bundle.video.getSenders();
          for (const sender of senders) {
            if (sender.track && sender.track.kind === 'video') {
              try {
                await sender.replaceTrack(null); // –ë–ï–ó renegotiation!
                console.log(`üóëÔ∏è –ó–∞–º–µ–Ω–µ–Ω video track –Ω–∞ null –¥–ª—è ${socketId} (–±–µ–∑ renegotiation)`);
              } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å track:`, error);
              }
            }
          }
        }
      }

      if (this.onLocalStreamUpdatedCallback) {
        this.onLocalStreamUpdatedCallback();
      }

      return false; // –ö–∞–º–µ—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞
    }

    // –§–∏–∑–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    try {
      console.log('–§–∏–∑–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É (getUserMedia)');
      const videoStream = await navigator.mediaDevices.getUserMedia({ video: DEFAULT_MEDIA_CONSTRAINTS.video || true });
      const track = videoStream.getVideoTracks()[0];
      if (!track) {
        return false;
      }
      this.localVideoStream = videoStream;
      this.localVideoTrack = track;
      this.ensureCompositeStream();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º replaceTrack –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–∞ –ë–ï–ó renegotiation
      const peerEntries = Array.from(this.peerConnections.entries());
      for (let index = 0; index < peerEntries.length; index++) {
        const [socketId, bundle] = peerEntries[index];
        if (bundle.video) {
          const senders = bundle.video.getSenders();
          let trackReplaced = false;
          for (const sender of senders) {
            if (sender.track === null || sender.track.kind === 'video') {
              try {
                await sender.replaceTrack(track); // –ë–ï–ó renegotiation!
                console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω video track –¥–ª—è ${socketId} (–±–µ–∑ renegotiation)`);
                trackReplaced = true;
                break;
              } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å track:`, error);
              }
            }
          }
          // –ï—Å–ª–∏ sender –Ω–µ –Ω–∞—à–µ–ª—Å—è (–Ω–µ –±—ã–ª–æ —Ç—Ä–µ–∫–∞ —Ä–∞–Ω—å—à–µ), –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ addTrack
          if (!trackReplaced) {
            try {
              bundle.video.addTrack(track, this.localVideoStream!);
              console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π video track –¥–ª—è ${socketId}`);
              await this.createOffer(socketId, 'video'); // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ addTrack
            } catch (error) {
              console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å track:`, error);
            }
          }
        }
      }

      if (this.onLocalStreamUpdatedCallback) {
        this.onLocalStreamUpdatedCallback();
      }

      return true; // –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É:', error);
      return false;
    }
  }

  async toggleMicrophone(): Promise<boolean> {
    // –§–∏–∑–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    if (this.localAudioTrack && this.localAudioStream) {
      console.log('–§–∏–∑–∏—á–µ—Å–∫–∏ –≤—ã–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω (track.stop)');
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
      this.localAudioStream.getTracks().forEach(track => track.stop());
      this.localAudioTrack = null;
      this.localAudioStream = null;
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      if (this.localCompositeStream) {
        this.localCompositeStream.getAudioTracks().forEach(track => {
          this.localCompositeStream!.removeTrack(track);
          track.stop();
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º replaceTrack(null) –≤–º–µ—Å—Ç–æ removeTrack - —ç—Ç–æ –ù–ï —Ç—Ä–µ–±—É–µ—Ç renegotiation!
      // –≠—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç –≤—Ö–æ–¥—è—â–∏–µ –ø–æ—Ç–æ–∫–∏ –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–µ –≤—ã–∑–æ–≤–µ—Ç connecting
      const peerEntries = Array.from(this.peerConnections.entries());
      for (let index = 0; index < peerEntries.length; index++) {
        const [socketId, bundle] = peerEntries[index];
        if (bundle.audio) {
          const senders = bundle.audio.getSenders();
          for (const sender of senders) {
            if (sender.track && sender.track.kind === 'audio') {
              try {
                await sender.replaceTrack(null); // –ë–ï–ó renegotiation!
                console.log(`üóëÔ∏è –ó–∞–º–µ–Ω–µ–Ω audio track –Ω–∞ null –¥–ª—è ${socketId} (–±–µ–∑ renegotiation)`);
              } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å track:`, error);
              }
            }
          }
        }
      }

      if (this.onLocalStreamUpdatedCallback) {
        this.onLocalStreamUpdatedCallback();
      }

      return false; // –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω
    }

    // –§–∏–∑–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    try {
      console.log('–§–∏–∑–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω (getUserMedia)');
      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: DEFAULT_MEDIA_CONSTRAINTS.audio || true });
      const track = audioStream.getAudioTracks()[0];
      if (!track) {
        return false;
      }
      this.localAudioStream = audioStream;
      this.localAudioTrack = track;
      this.ensureCompositeStream();

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º replaceTrack –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç—Ä–µ–∫–∞ –ë–ï–ó renegotiation
      const peerEntries = Array.from(this.peerConnections.entries());
      for (let index = 0; index < peerEntries.length; index++) {
        const [socketId, bundle] = peerEntries[index];
        if (bundle.audio) {
          const senders = bundle.audio.getSenders();
          let trackReplaced = false;
          for (const sender of senders) {
            if (sender.track === null || sender.track.kind === 'audio') {
              try {
                await sender.replaceTrack(track); // –ë–ï–ó renegotiation!
                console.log(`‚úÖ –ó–∞–º–µ–Ω–µ–Ω audio track –¥–ª—è ${socketId} (–±–µ–∑ renegotiation)`);
                trackReplaced = true;
                break;
              } catch (error) {
                console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å track:`, error);
              }
            }
          }
          // –ï—Å–ª–∏ sender –Ω–µ –Ω–∞—à–µ–ª—Å—è (–Ω–µ –±—ã–ª–æ —Ç—Ä–µ–∫–∞ —Ä–∞–Ω—å—à–µ), –¥–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ addTrack
          if (!trackReplaced) {
            try {
              bundle.audio.addTrack(track, this.localAudioStream!);
              console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π audio track –¥–ª—è ${socketId}`);
              await this.createOffer(socketId, 'audio'); // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ addTrack
            } catch (error) {
              console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å track:`, error);
            }
          }
        }
      }

      if (this.onLocalStreamUpdatedCallback) {
        this.onLocalStreamUpdatedCallback();
      }

      return true; // –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω
    } catch (error) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω:', error);
      return false;
    }
  }

  async startScreenShare(): Promise<boolean> {
    try {
      this.screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: false });
      const screenTrack = this.screenStream.getVideoTracks()[0];
      if (!screenTrack) {
        return false;
      }

      screenTrack.onended = () => {
        this.stopScreenShare();
      };

      const roomId = (window as any).__NIM_CURRENT_ROOM_ID__;
      if (roomId) {
        try {
          socketService.notifyScreenShareStarted(roomId, this.screenStream.id);
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ –Ω–∞—á–∞–ª–µ screen share:', error);
        }
      }

      // Screen sharing –∏–¥–µ—Ç —á–µ—Ä–µ–∑ –û–¢–î–ï–õ–¨–ù–´–ô 'screen' connection
      const peerEntries = Array.from(this.peerConnections.entries());
      for (let index = 0; index < peerEntries.length; index++) {
        const [socketId] = peerEntries[index];
        await this.ensureLocalTrackAttached(socketId, 'screen');
        await this.createOffer(socketId, 'screen');
        console.log(`üì∫ –û—Ç–ø—Ä–∞–≤–ª—è—é screen offer –∫ ${socketId}`);
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞:', error);
      return false;
    }
  }

  stopScreenShare(): boolean {
    if (!this.screenStream) {
      return false;
    }

    this.screenStream.getTracks().forEach((track) => track.stop());
    this.screenStream = null;

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º screen peer connections
    const peerEntries = Array.from(this.peerConnections.entries());
    for (let index = 0; index < peerEntries.length; index++) {
      const [socketId, bundle] = peerEntries[index];
      if (bundle.screen) {
        bundle.screen.close();
        delete bundle.screen;
        this.peerConnections.set(socketId, bundle);
        console.log(`üì∫ –ó–∞–∫—Ä—ã—Ç screen connection –¥–ª—è ${socketId}`);
      }
      // –£–¥–∞–ª—è–µ–º screen stream –∏–∑ Map
      this.remoteScreenStreams.delete(socketId);
    }

    const roomId = (window as any).__NIM_CURRENT_ROOM_ID__;
    if (roomId) {
      try {
        socketService.notifyScreenShareStopped(roomId);
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ screen share:', error);
      }
    }

    return true;
  }

  closeConnection(remoteSocketId: string): void {
    const bundle = this.peerConnections.get(remoteSocketId);
    if (bundle) {
      bundle.audio.close();
      bundle.video.close();
      if (bundle.screen) {
        bundle.screen.close();
      }
      this.peerConnections.delete(remoteSocketId);
    }

    this.remoteVideoStreams.delete(remoteSocketId);
    this.remoteAudioStreams.delete(remoteSocketId);
    this.remoteScreenStreams.delete(remoteSocketId);

    if (this.onRemoteStreamRemovedCallback) {
      this.onRemoteStreamRemovedCallback(remoteSocketId);
    }
  }

  cleanupRemoteConnections(): void {
    console.log('–û—á–∏—â–∞—é –≤—Å–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, –Ω–æ –æ—Å—Ç–∞–≤–ª—è—é –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ç–æ–∫–∏');
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ peer connections
    this.peerConnections.forEach((bundle) => {
      bundle.audio.close();
      bundle.video.close();
      if (bundle.screen) {
        bundle.screen.close();
      }
    });
    this.peerConnections.clear();

    // –û—á–∏—â–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
    this.remoteVideoStreams.clear();
    this.remoteAudioStreams.clear();
    this.remoteScreenStreams.clear();
    this.remoteSocketIdToScreenStreamId.clear();
    this.peersExpectingScreen.clear();
  }

  cleanup(): void {
    this.peerConnections.forEach((bundle) => {
      bundle.audio.close();
      bundle.video.close();
    });
    this.peerConnections.clear();

    this.localAudioStream?.getTracks().forEach((track) => track.stop());
    this.localVideoStream?.getTracks().forEach((track) => track.stop());
    this.screenStream?.getTracks().forEach((track) => track.stop());

    this.localAudioStream = null;
    this.localVideoStream = null;
    this.localCompositeStream = null;
    this.localAudioTrack = null;
    this.localVideoTrack = null;
    this.screenStream = null;

    this.remoteVideoStreams.clear();
    this.remoteAudioStreams.clear();
    this.remoteScreenStreams.clear();
    this.remoteSocketIdToScreenStreamId.clear();
    this.peersExpectingScreen.clear();
  }

  onRemoteVideoStream(callback: (socketId: string, stream: MediaStream) => void): void {
    this.onRemoteVideoStreamCallback = callback;
  }

  onRemoteAudioStream(callback: (socketId: string, stream: MediaStream) => void): void {
    this.onRemoteAudioStreamCallback = callback;
  }

  onRemoteScreenStream(callback: (socketId: string, stream: MediaStream) => void): void {
    this.onRemoteScreenStreamCallback = callback;
  }

  onRemoteStreamRemoved(callback: (socketId: string) => void): void {
    this.onRemoteStreamRemovedCallback = callback;
  }

  onLocalStreamUpdated(callback: () => void): void {
    this.onLocalStreamUpdatedCallback = callback;
  }

  setAnnouncedScreenStreamId(remoteSocketId: string, streamId: string): void {
    this.remoteSocketIdToScreenStreamId.set(remoteSocketId, streamId);
  }

  clearAnnouncedScreenStreamId(remoteSocketId: string): void {
    this.remoteSocketIdToScreenStreamId.delete(remoteSocketId);
    this.remoteScreenStreams.delete(remoteSocketId);
    this.peersExpectingScreen.delete(remoteSocketId);
    if (this.onRemoteStreamRemovedCallback) {
      this.onRemoteStreamRemovedCallback(remoteSocketId);
    }
  }

  markPeerExpectsScreen(remoteSocketId: string): void {
    this.peersExpectingScreen.add(remoteSocketId);
  }
}

const webrtcService = new WebRTCService();
export default webrtcService;

