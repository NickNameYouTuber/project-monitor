/**
 * Bandwidth Manager
 * –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–æ–º –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–ø—É—Å–∫–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
 */

import type { Consumer } from 'mediasoup-client/lib/types';
import { MediaSoupService } from './mediasoupClient';

export interface BandwidthStats {
  timestamp: number;
  availableBitrate: number; // bits per second
  packetLoss: number; // percentage
  rtt: number; // round-trip time in ms
}

export type QualityLevel = 'low' | 'medium' | 'high' | 'auto';

export class BandwidthManager {
  private mediasoupService: MediaSoupService | null = null;
  private stats: BandwidthStats[] = [];
  private maxStatsHistory = 10;
  
  // Quality thresholds (bits per second)
  private readonly thresholds = {
    high: 1000000,    // 1 Mbps - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å high quality (720p)
    medium: 500000,   // 500 Kbps - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ medium (360p)
    low: 250000       // 250 Kbps - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ low (180p)
  };
  
  // Packet loss thresholds
  private readonly packetLossThresholds = {
    good: 2,          // < 2% packet loss - –≤—Å–µ —Ö–æ—Ä–æ—à–æ
    acceptable: 5,    // 2-5% - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    poor: 10          // > 10% - –∫—Ä–∏—Ç–∏—á–Ω–æ, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω–∏–∑–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
  };
  
  private monitoringInterval: NodeJS.Timeout | null = null;
  private currentQuality: QualityLevel = 'medium';

  constructor() {
    console.log('üìä BandwidthManager initialized');
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å MediaSoup service –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  setMediaSoupService(service: MediaSoupService) {
    this.mediasoupService = service;
  }

  /**
   * –ù–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ bandwidth
   */
  startMonitoring(intervalMs: number = 3000) {
    if (this.monitoringInterval) {
      this.stopMonitoring();
    }

    console.log(`üì° Starting bandwidth monitoring (interval: ${intervalMs}ms)`);
    
    this.monitoringInterval = setInterval(() => {
      this.checkBandwidthAndAdjust();
    }, intervalMs);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
   */
  stopMonitoring() {
    if (this.monitoringInterval) {
      clearInterval(this.monitoringInterval);
      this.monitoringInterval = null;
      console.log('‚èπÔ∏è  Bandwidth monitoring stopped');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å bandwidth –∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
   */
  private async checkBandwidthAndAdjust() {
    if (!this.mediasoupService) return;

    const consumers = this.mediasoupService.getConsumers();
    const videoConsumers = consumers.filter(c => c.kind === 'video');

    if (videoConsumers.length === 0) return;

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç consumers
    for (const consumer of videoConsumers) {
      try {
        const stats = await consumer.getStats();
        const bandwidth = this.extractBandwidthFromStats(stats);
        
        if (bandwidth) {
          this.addStats(bandwidth);
          this.adjustQualityBasedOnStats(consumer);
        }
      } catch (error) {
        console.error('Failed to get consumer stats:', error);
      }
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á—å bandwidth –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ WebRTC stats
   */
  private extractBandwidthFromStats(stats: RTCStatsReport): BandwidthStats | null {
    let availableBitrate = 0;
    let packetLoss = 0;
    let rtt = 0;

    stats.forEach((report) => {
      if (report.type === 'inbound-rtp' && report.kind === 'video') {
        // Available bitrate
        if (report.bytesReceived !== undefined) {
          availableBitrate = report.bytesReceived * 8; // Convert to bits
        }
        
        // Packet loss
        if (report.packetsLost !== undefined && report.packetsReceived !== undefined) {
          const totalPackets = report.packetsLost + report.packetsReceived;
          if (totalPackets > 0) {
            packetLoss = (report.packetsLost / totalPackets) * 100;
          }
        }
      }
      
      if (report.type === 'candidate-pair' && report.state === 'succeeded') {
        // RTT
        if (report.currentRoundTripTime !== undefined) {
          rtt = report.currentRoundTripTime * 1000; // Convert to ms
        }
      }
    });

    if (availableBitrate > 0) {
      return {
        timestamp: Date.now(),
        availableBitrate,
        packetLoss,
        rtt
      };
    }

    return null;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  private addStats(stats: BandwidthStats) {
    this.stats.push(stats);
    
    // Keep only last N stats
    if (this.stats.length > this.maxStatsHistory) {
      this.stats.shift();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω—é—é bandwidth –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N measurements
   */
  private getAverageBandwidth(): number {
    if (this.stats.length === 0) return 0;
    
    const sum = this.stats.reduce((acc, stat) => acc + stat.availableBitrate, 0);
    return sum / this.stats.length;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–µ–¥–Ω–∏–π packet loss
   */
  private getAveragePacketLoss(): number {
    if (this.stats.length === 0) return 0;
    
    const sum = this.stats.reduce((acc, stat) => acc + stat.packetLoss, 0);
    return sum / this.stats.length;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ bandwidth
   */
  private determineOptimalQuality(): QualityLevel {
    const avgBandwidth = this.getAverageBandwidth();
    const avgPacketLoss = this.getAveragePacketLoss();

    // –ï—Å–ª–∏ packet loss —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π, –ø–æ–Ω–∏–∑–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
    if (avgPacketLoss > this.packetLossThresholds.poor) {
      console.log(`‚ö†Ô∏è  High packet loss (${avgPacketLoss.toFixed(1)}%), reducing quality to LOW`);
      return 'low';
    }

    if (avgPacketLoss > this.packetLossThresholds.acceptable) {
      console.log(`‚ö†Ô∏è  Moderate packet loss (${avgPacketLoss.toFixed(1)}%), reducing quality to MEDIUM`);
      return 'medium';
    }

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ bandwidth
    if (avgBandwidth >= this.thresholds.high) {
      return 'high';
    } else if (avgBandwidth >= this.thresholds.medium) {
      return 'medium';
    } else {
      return 'low';
    }
  }

  /**
   * –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ consumer –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private async adjustQualityBasedOnStats(consumer: Consumer) {
    if (!this.mediasoupService) return;
    if (this.stats.length < 3) return; // –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 measurement

    const optimalQuality = this.determineOptimalQuality();
    
    // –ï—Å–ª–∏ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–∏–º–µ–Ω–∏—Ç—å
    if (optimalQuality !== this.currentQuality) {
      console.log(`üéöÔ∏è Adjusting quality: ${this.currentQuality} ‚Üí ${optimalQuality}`);
      this.currentQuality = optimalQuality;
      
      const layers = this.qualityToLayers(optimalQuality);
      
      try {
        await this.mediasoupService.setConsumerPreferredLayers(
          consumer.id,
          layers.spatialLayer,
          layers.temporalLayer
        );
        
        console.log(`‚úÖ Quality adjusted to ${optimalQuality} (spatial: ${layers.spatialLayer})`);
      } catch (error) {
        console.error('Failed to adjust quality:', error);
      }
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å quality level –≤ spatial/temporal layers
   */
  private qualityToLayers(quality: QualityLevel): { spatialLayer: number; temporalLayer: number } {
    switch (quality) {
      case 'low':
        return { spatialLayer: 0, temporalLayer: 2 }; // 180p
      case 'medium':
        return { spatialLayer: 1, temporalLayer: 2 }; // 360p
      case 'high':
        return { spatialLayer: 2, temporalLayer: 2 }; // 720p
      case 'auto':
      default:
        return { spatialLayer: 1, temporalLayer: 2 }; // Default to medium
    }
  }

  /**
   * –í—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ (override auto)
   */
  async setQuality(quality: QualityLevel) {
    if (!this.mediasoupService) {
      throw new Error('MediaSoup service not set');
    }

    console.log(`üéõÔ∏è Manually setting quality to: ${quality}`);
    this.currentQuality = quality;

    const consumers = this.mediasoupService.getConsumers();
    const videoConsumers = consumers.filter(c => c.kind === 'video');

    const layers = this.qualityToLayers(quality);

    for (const consumer of videoConsumers) {
      try {
        await this.mediasoupService.setConsumerPreferredLayers(
          consumer.id,
          layers.spatialLayer,
          layers.temporalLayer
        );
      } catch (error) {
        console.error(`Failed to set quality for consumer ${consumer.id}:`, error);
      }
    }

    console.log(`‚úÖ Quality set to ${quality} for ${videoConsumers.length} consumers`);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ
   */
  getCurrentQuality(): QualityLevel {
    return this.currentQuality;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  getCurrentStats(): BandwidthStats | null {
    if (this.stats.length === 0) return null;
    return this.stats[this.stats.length - 1];
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
   */
  getRecommendedQuality(): QualityLevel {
    if (this.stats.length < 3) return 'medium';
    return this.determineOptimalQuality();
  }

  /**
   * Cleanup
   */
  destroy() {
    this.stopMonitoring();
    this.stats = [];
    this.mediasoupService = null;
  }
}

export default new BandwidthManager();

