from typing import List, Optional
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
import git
import uuid
from datetime import datetime
from pathlib import Path
import os

from ..database import get_db
from ..models import Repository, Task, Comment, User
from ..schemas import git as git_schemas
from ..routes.auth import get_current_active_user
from ..routes.repository_content import get_repo_path, check_repository_access

router = APIRouter(
    prefix="/task-repository",
    tags=["task-repository"],
    responses={404: {"description": "Not found"}},
)

@router.get("/{task_id}/branches")
async def get_task_related_branches(
    task_id: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    Get branches related to a specific task
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–¥–∞—á–µ
        task = db.query(Task).filter(Task.id == task_id).first()
        if not task:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Task not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ç–∫–∞—Ö
        branch_comments = db.query(Comment).filter(
            Comment.task_id == task_id,
            Comment.is_system == True,
            Comment.content.like("%Created branch%")
        ).all()
        
        result = []
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ç–∫–∞—Ö –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        for comment in branch_comments:
            # –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "Created branch **branch_name** from base_branch"
            content = comment.content
            try:
                # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                branch_name = content.split("**")[1]
                base_branch = content.split("from ")[1]
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                project_id = task.project_id
                repositories = db.query(Repository).filter(Repository.project_id == project_id).all()
                
                for repo in repositories:
                    repo_path = get_repo_path(repo.id)
                    if not repo_path.exists():
                        continue
                    
                    git_repo = git.Repo(repo_path)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
                    if branch_name not in [head.name for head in git_repo.heads]:
                        continue
                    
                    result.append({
                        "branch_name": branch_name,
                        "repository_id": repo.id,
                        "repository_name": repo.name,
                        "created_at": comment.created_at.isoformat(),
                        "base_branch": base_branch
                    })
            except (IndexError, ValueError, git.GitCommandError):
                continue
        
        return result
    
    except Exception as e:
        print(f"Error getting task branches: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error getting task branches: {str(e)}"
        )


@router.get("/{task_id}/commits")
async def get_branch_commits(
    task_id: str,
    repository_id: str,
    branch: str,
    current_user: User = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """
    Get commits from a specific branch related to a task
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        task = db.query(Task).filter(Task.id == task_id).first()
        if not task:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Task not found")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é
        repository = check_repository_access(repository_id, str(current_user.id), db)
        repo_path = get_repo_path(repository_id)
        
        if not repo_path.exists():
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND, 
                detail="Repository directory not found"
            )
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        repo = git.Repo(repo_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏
        if branch not in [head.name for head in repo.heads]:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Branch '{branch}' not found"
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã
        commits = []
        base_branch = None
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ—Ç–∫–∏, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ç–∫—É
        branch_comments = db.query(Comment).filter(
            Comment.task_id == task_id,
            Comment.is_system == True,
            Comment.content.like(f"%Created branch **{branch}**%")
        ).first()
        
        if branch_comments:
            try:
                base_branch = branch_comments.content.split("from ")[1]
            except (IndexError, ValueError):
                pass
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–∑–æ–≤—É—é –≤–µ—Ç–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é
        if not base_branch or base_branch not in [head.name for head in repo.heads]:
            for default_branch in ['main', 'master']:
                if default_branch in [head.name for head in repo.heads]:
                    base_branch = default_branch
                    break
            
            if not base_branch:
                base_branch = repo.heads[0].name
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –≤–µ—Ç–∫–∏ (—Ç.–µ. –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –±–∞–∑–æ–≤–æ–π –≤–µ—Ç–∫–µ)
        try:
            git_commits = list(repo.iter_commits(f"{branch}..{base_branch}", reverse=True))
            for commit in git_commits:
                commits.append(git_schemas.GitCommit(
                    hash=commit.hexsha,
                    short_hash=commit.hexsha[:7],
                    message=commit.message,
                    author_name=commit.author.name,
                    author_email=commit.author.email,
                    date=commit.committed_datetime.isoformat()
                ))
        except git.GitCommandError as e:
            print(f"Git command error: {str(e)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —ç—Ç–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤
        for commit in commits:
            comment = db.query(Comment).filter(
                Comment.task_id == task_id,
                Comment.is_system == True,
                Comment.content.like(f"%Commit {commit.short_hash}%")
            ).first()
            
            # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not comment:
                new_comment = Comment(
                    id=str(uuid.uuid4()),
                    task_id=task_id,
                    user_id=current_user.id,
                    content=f"üìù New commit **{commit.short_hash}** on branch **{branch}**:\n\n> {commit.message}",
                    is_system=True,
                    created_at=datetime.now(),
                    updated_at=datetime.now()
                )
                db.add(new_comment)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.commit()
        
        return commits
    
    except Exception as e:
        print(f"Error getting branch commits: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error getting branch commits: {str(e)}"
        )


# Webhook –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–∞—Ö
@router.post("/webhook/{repository_id}")
async def git_webhook(
    repository_id: str,
    payload: dict,
    db: Session = Depends(get_db)
):
    """
    Webhook –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Git-—Å–µ—Ä–≤–µ—Ä–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, GitHub, GitLab)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        repository = db.query(Repository).filter(Repository.id == repository_id).first()
        if not repository:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Repository not found")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö—É–∫–∏ –æ—Ç —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        event_type = payload.get("event_type") or ""
        
        if "push" in event_type.lower():
            ref = payload.get("ref", "")
            branch = ref.replace("refs/heads/", "")
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –≤–µ—Ç–∫–æ–π —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            branch_comments = db.query(Comment).filter(
                Comment.is_system == True,
                Comment.content.like(f"%Created branch **{branch}**%")
            ).all()
            
            task_ids = [comment.task_id for comment in branch_comments]
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –∏–∑ —Ö—É–∫–∞
            commits = payload.get("commits", [])
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –∏ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–º–∏—Ç–∞ —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            for task_id in task_ids:
                for commit in commits:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–º–º–∏—Ç–∞
                    comment = db.query(Comment).filter(
                        Comment.task_id == task_id,
                        Comment.is_system == True,
                        Comment.content.like(f"%Commit {commit.get('id')[:7]}%")
                    ).first()
                    
                    if not comment:
                        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, admin)
                        system_user = db.query(User).filter(User.username == "system").first()
                        if not system_user:
                            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
                            system_user = db.query(User).filter(User.is_superuser == True).first()
                        
                        if system_user:
                            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                            new_comment = Comment(
                                id=str(uuid.uuid4()),
                                task_id=task_id,
                                user_id=system_user.id,
                                content=f"üìù New commit **{commit.get('id')[:7]}** on branch **{branch}**:\n\n> {commit.get('message')}",
                                is_system=True,
                                created_at=datetime.now(),
                                updated_at=datetime.now()
                            )
                            db.add(new_comment)
            
            db.commit()
            
        return {"status": "success"}
    
    except Exception as e:
        print(f"Error processing webhook: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error processing webhook: {str(e)}"
        )
