version: "3.8"

services:
  frontend:
    build: 
      context: ./front
      dockerfile: Dockerfile
    container_name: project-monitor-frontend
    ports:
      - "7670:7670"
    depends_on:
      - backend
    networks:
      - project-monitor-network
    restart: unless-stopped

  backend:
    build: 
      context: ./newbackend
      dockerfile: Dockerfile
    container_name: project-monitor-backend
    ports:
      - "7671:7671"
    environment:
      - JAVA_OPTS=-Dserver.port=7671
      - DATABASE_URL=jdbc:postgresql://db:5432/nit
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - GIT_REPOS_ROOT=/git-repos
      - JWT_SECRET=dev-secret-key-at-least-256-bits-for-hmac-sha-algorithms-security-requirement
    volumes:
      - gitrepos:/git-repos
    networks:
      - project-monitor-network
    restart: unless-stopped
    depends_on:
      - db
      - git-http

  git-http:
    image: gitea/gitea:1.21.10
    container_name: project-monitor-git-http
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__server__DOMAIN=localhost
      - GITEA__server__ROOT_URL=http://localhost:7681/
      - GITEA__server__HTTP_PORT=7681
    ports:
      - "7681:7681"
    volumes:
      - gitrepos:/data/git/repositories
    networks:
      - project-monitor-network
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: project-monitor-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=nit
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "7672:5432"
    networks:
      - project-monitor-network

  runner:
    build:
      context: ./runner
    container_name: project-monitor-runner
    environment:
      - API_URL=http://backend:7671/api
      - RUNNER_TOKEN=dev-runner-token
      - RUNNER_NAME=default-runner
      - WORKSPACE_ROOT=/git-repos
    volumes:
      - gitrepos:/git-repos
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project-monitor-network
    depends_on:
      - backend
    restart: unless-stopped

  nimeet-backend:
    build:
      context: ./services/nimeet-backend
      dockerfile: Dockerfile
    container_name: project-monitor-nimeet-backend
    ports:
      - "4000:4000"
    env_file:
      - ./services/nimeet-backend/.env
    depends_on:
      - mongo
      - redis
      - turn
    networks:
      - project-monitor-network
    restart: unless-stopped

  mongo:
    image: mongo:7
    container_name: project-monitor-mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=nimeet
      - MONGO_INITDB_ROOT_PASSWORD=nimeetpass
      - MONGO_INITDB_DATABASE=nimeet
    volumes:
      - mongodata:/data/db
    networks:
      - project-monitor-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: project-monitor-redis
    command: redis-server --requirepass nimeet_redis_pass
    volumes:
      - redisdata:/data
    networks:
      - project-monitor-network
    restart: unless-stopped

  turn:
    image: coturn/coturn:4.6.2
    container_name: project-monitor-turn
    command: [
      "-c", "/etc/coturn/turnserver.conf",
      "--no-cli",
      "--no-tls",
      "--no-dtls"
    ]
    environment:
      - TURN_PORT=3478
    ports:
      - "3478:3478/udp"
      - "3478:3478/tcp"
    volumes:
      - ./turn/turnserver.conf:/etc/coturn/turnserver.conf:ro
    networks:
      - project-monitor-network
    restart: unless-stopped

networks:
  project-monitor-network:
    driver: bridge

volumes:
  pgdata:
  gitrepos:
  mongodata:
  redisdata:
