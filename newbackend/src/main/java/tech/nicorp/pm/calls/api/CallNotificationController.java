package tech.nicorp.pm.calls.api;

import io.swagger.v3.oas.annotations.Operation;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.MediaType;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import java.io.IOException;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@RestController
@RequestMapping("/api/call-notifications")
@RequiredArgsConstructor
public class CallNotificationController {
    
    private static final Map<UUID, SseEmitter> emitters = new ConcurrentHashMap<>();
    
    @GetMapping(value = "/stream", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
    @Operation(summary = "SSE stream –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–≤–æ–Ω–∫–∞—Ö")
    public SseEmitter streamNotifications(@AuthenticationPrincipal Object principal) {
        log.info("üîç DEBUG SSE: principal = {}, type = {}", principal, principal != null ? principal.getClass().getName() : "null");
        
        UUID userId = extractUserId(principal);
        log.info("üîç DEBUG SSE: extracted userId = {}", userId);
        
        if (userId == null) {
            log.warn("‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SSE –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, principal was: {}", principal);
            SseEmitter emitter = new SseEmitter(0L);
            emitter.completeWithError(new IllegalStateException("Unauthorized"));
            return emitter;
        }
        
        log.info("üì° SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);
        
        SseEmitter emitter = new SseEmitter(0L); // –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
        emitters.put(userId, emitter);
        
        emitter.onCompletion(() -> {
            log.info("üì° SSE –æ—Ç–∫–ª—é—á–µ–Ω: {}", userId);
            emitters.remove(userId);
        });
        
        emitter.onTimeout(() -> {
            log.info("üì° SSE —Ç–∞–π–º–∞—É—Ç: {}", userId);
            emitters.remove(userId);
        });
        
        emitter.onError((e) -> {
            log.error("üì° SSE –æ—à–∏–±–∫–∞: {}", userId, e);
            emitters.remove(userId);
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try {
            emitter.send(SseEmitter.event()
                .name("connected")
                .data(Map.of("message", "Connected to call notifications")));
        } catch (IOException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ heartbeat", e);
            emitters.remove(userId);
        }
        
        return emitter;
    }
    
    public static void sendCallStarting(UUID userId, String callId, String title, String roomId) {
        SseEmitter emitter = emitters.get(userId);
        if (emitter == null) {
            log.warn("‚ö†Ô∏è –ù–µ—Ç SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            return;
        }
        
        try {
            emitter.send(SseEmitter.event()
                .name("call-starting")
                .data(Map.of(
                    "callId", callId,
                    "title", title,
                    "roomId", roomId
                )));
            log.info("‚úÖ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId);
        } catch (IOException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId, e);
            emitters.remove(userId);
        }
    }
    
    public static void sendCallReminder(UUID userId, String callId, String title, int minutesUntil) {
        SseEmitter emitter = emitters.get(userId);
        if (emitter == null) {
            log.warn("‚ö†Ô∏è –ù–µ—Ç SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            return;
        }
        
        try {
            emitter.send(SseEmitter.event()
                .name("call-reminder")
                .data(Map.of(
                    "callId", callId,
                    "title", title,
                    "minutesUntil", minutesUntil
                )));
            log.info("‚úÖ SSE –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId);
        } catch (IOException e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SSE –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId, e);
            emitters.remove(userId);
        }
    }
    
    private UUID extractUserId(Object principal) {
        if (principal == null) {
            return null;
        }
        
        if (principal instanceof String) {
            try {
                return UUID.fromString((String) principal);
            } catch (IllegalArgumentException e) {
                return null;
            }
        }
        
        return null;
    }
}

