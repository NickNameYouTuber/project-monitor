package tech.nicorp.pm.calls.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import tech.nicorp.pm.calls.domain.Call;
import tech.nicorp.pm.calls.domain.CallParticipant;
import tech.nicorp.pm.calls.domain.ParticipantRole;
import tech.nicorp.pm.calls.domain.ParticipantStatus;
import tech.nicorp.pm.calls.repo.CallRepository;
import tech.nicorp.pm.users.domain.User;
import tech.nicorp.pm.users.repo.UserRepository;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Service
@RequiredArgsConstructor
public class CallParticipantService {

    private final CallRepository callRepository;
    private final UserRepository userRepository;

    /**
     * –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ ORGANIZER
     */
    @Transactional
    public void addParticipantsToCall(Call call, List<UUID> userIds, User creator) {
        log.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ –∑–≤–æ–Ω–∫—É {}: creator={}, participants={}", 
            call.getId(), creator.getId(), userIds);
        
        // 1. –î–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ ORGANIZER
        addParticipantToCall(call, creator, ParticipantRole.ORGANIZER);
        
        // 2. –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–∫ PARTICIPANT
        if (userIds != null && !userIds.isEmpty()) {
            for (UUID userId : userIds) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è (—É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω)
                if (userId.equals(creator.getId())) {
                    continue;
                }
                
                userRepository.findById(userId).ifPresent(user -> {
                    addParticipantToCall(call, user, ParticipantRole.PARTICIPANT);
                });
            }
        }
        
        callRepository.save(call);
        log.info("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫ –∑–≤–æ–Ω–∫—É {}", call.getParticipants().size(), call.getId());
    }

    /**
     * –î–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫ –∑–≤–æ–Ω–∫—É
     */
    @Transactional
    public CallParticipant addParticipant(UUID callId, UUID userId, ParticipantRole role) {
        Call call = callRepository.findById(callId)
            .orElseThrow(() -> new IllegalArgumentException("Call not found: " + callId));
        
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new IllegalArgumentException("User not found: " + userId));
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
        boolean alreadyExists = call.getParticipants().stream()
            .anyMatch(p -> p.getUser().getId().equals(userId));
        
        if (alreadyExists) {
            throw new IllegalStateException("User already participant of this call");
        }
        
        CallParticipant participant = addParticipantToCall(call, user, role);
        callRepository.save(call);
        
        log.info("‚ûï –î–æ–±–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {} –∫ –∑–≤–æ–Ω–∫—É {} —Å —Ä–æ–ª—å—é {}", userId, callId, role);
        return participant;
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∑–≤–æ–Ω–∫–∞
     */
    @Transactional
    public void removeParticipant(UUID callId, UUID userId) {
        Call call = callRepository.findById(callId)
            .orElseThrow(() -> new IllegalArgumentException("Call not found: " + callId));
        
        call.getParticipants().removeIf(p -> p.getUser().getId().equals(userId));
        callRepository.save(call);
        
        log.info("‚ûñ –£–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {} –∏–∑ –∑–≤–æ–Ω–∫–∞ {}", userId, callId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–≤–æ–Ω–∫–∞
     */
    public List<CallParticipant> getParticipants(UUID callId) {
        Call call = callRepository.findById(callId)
            .orElseThrow(() -> new IllegalArgumentException("Call not found: " + callId));
        
        return call.getParticipants();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∑–≤–æ–Ω–∫—É
     */
    public boolean hasAccess(UUID callId, UUID userId) {
        Call call = callRepository.findById(callId)
            .orElseThrow(() -> new IllegalArgumentException("Call not found: " + callId));
        
        return call.getParticipants().stream()
            .anyMatch(p -> p.getUser().getId().equals(userId));
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–≤–æ–Ω–∫–µ
     */
    public Optional<ParticipantRole> getUserRole(UUID callId, UUID userId) {
        Call call = callRepository.findById(callId)
            .orElseThrow(() -> new IllegalArgumentException("Call not found: " + callId));
        
        return call.getParticipants().stream()
            .filter(p -> p.getUser().getId().equals(userId))
            .map(CallParticipant::getRole)
            .findFirst();
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞
     */
    @Transactional
    public void updateStatus(UUID callId, UUID userId, ParticipantStatus newStatus) {
        Call call = callRepository.findById(callId)
            .orElseThrow(() -> new IllegalArgumentException("Call not found: " + callId));
        
        CallParticipant participant = call.getParticipants().stream()
            .filter(p -> p.getUser().getId().equals(userId))
            .findFirst()
            .orElseThrow(() -> new IllegalArgumentException("Participant not found"));
        
        participant.setStatus(newStatus);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timestamp –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        switch (newStatus) {
            case JOINED -> participant.setJoinedAt(OffsetDateTime.now());
            case LEFT -> participant.setLeftAt(OffsetDateTime.now());
        }
        
        callRepository.save(call);
        log.info("üìù –°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–Ω–∏–∫–∞ {} –≤ –∑–≤–æ–Ω–∫–µ {} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {}", userId, callId, newStatus);
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
     */
    private CallParticipant addParticipantToCall(Call call, User user, ParticipantRole role) {
        CallParticipant participant = new CallParticipant();
        participant.setCall(call);
        participant.setUser(user);
        participant.setRole(role);
        participant.setStatus(ParticipantStatus.INVITED);
        participant.setInvitedAt(OffsetDateTime.now());
        
        call.getParticipants().add(participant);
        return participant;
    }
}

