package tech.nicorp.pm.calls.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import tech.nicorp.pm.calls.domain.Call;
import tech.nicorp.pm.calls.domain.CallParticipant;
import tech.nicorp.pm.users.domain.User;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@Service
@RequiredArgsConstructor
public class CallNotificationService {

    private final RestTemplate restTemplate;
    
    @Value("${nimeet.backend.url:http://localhost:3001}")
    private String nimeetBackendUrl;

    public void notifyCallStarting(Call call) {
        log.info("üîî –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞: callId={}, title={}, roomId={}", 
            call.getId(), call.getTitle(), call.getRoomId());
        
        if (call.getParticipants() == null || call.getParticipants().isEmpty()) {
            log.warn("‚ö†Ô∏è –ó–≤–æ–Ω–æ–∫ {} –Ω–µ –∏–º–µ–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", call.getRoomId());
            return;
        }
        
        log.info("üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–≤–æ–Ω–∫–∞: {}", call.getParticipants().size());
        
        for (CallParticipant participant : call.getParticipants()) {
            User user = participant.getUser();
            if (user == null) {
                log.warn("‚ö†Ô∏è –£—á–∞—Å—Ç–Ω–∏–∫ –±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
                continue;
            }
            
            try {
                tech.nicorp.pm.calls.api.CallNotificationController.sendCallStarting(
                    user.getId(),
                    call.getId().toString(),
                    call.getTitle(),
                    call.getRoomId()
                );
                
                log.info("‚úÖ SSE —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∑–≤–æ–Ω–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} (userId={})", 
                    user.getUsername(), user.getId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", user.getUsername(), e.getMessage(), e);
            }
        }
    }
    
    public void notifyCallReminder(Call call, int minutesUntil) {
        if (call.getParticipants() == null || call.getParticipants().isEmpty()) {
            return;
        }
        
        for (CallParticipant participant : call.getParticipants()) {
            User user = participant.getUser();
            if (user == null) continue;
            
            try {
                tech.nicorp.pm.calls.api.CallNotificationController.sendCallReminder(
                    user.getId(),
                    call.getId().toString(),
                    call.getTitle(),
                    minutesUntil
                );
                
                log.info("‚úÖ SSE –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} (—á–µ—Ä–µ–∑ {} –º–∏–Ω)", user.getUsername(), minutesUntil);
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", user.getUsername(), e.getMessage());
            }
        }
    }
}

