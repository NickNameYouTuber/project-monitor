package tech.nicorp.pm.calls.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import tech.nicorp.pm.calls.domain.Call;
import tech.nicorp.pm.calls.domain.CallStatus;
import tech.nicorp.pm.calls.repo.CallRepository;

import java.time.OffsetDateTime;
import java.util.List;

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–≤–æ–Ω–∫–æ–≤
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —á–µ—Ä–µ–∑ Spring @Scheduled
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class CallStatusManager {

    private final CallRepository callRepository;

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–≤–æ–Ω–∫–æ–≤ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
     */
    @Scheduled(fixedRate = 60000) // 60 —Å–µ–∫—É–Ω–¥
    public void updateCallStatuses() {
        log.debug("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–≤–æ–Ω–∫–æ–≤");
        
        try {
            activateScheduledCalls();
            completeActiveCalls();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–≤–æ–Ω–∫–æ–≤", e);
        }
    }

    /**
     * SCHEDULED ‚Üí ACTIVE (–µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ)
     */
    private void activateScheduledCalls() {
        OffsetDateTime now = OffsetDateTime.now();
        
        List<Call> toActivate = callRepository.findByStatusAndScheduledTimeBefore(
            CallStatus.SCHEDULED,
            now
        );
        
        for (Call call : toActivate) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ - –∑–≤–æ–Ω–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            call.setStatus(CallStatus.ACTIVE);
            callRepository.save(call);
            log.info("‚úÖ Call {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {}", call.getId(), call.getTitle());
        }
        
        if (toActivate.size() > 0) {
            log.info("üîµ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {}", toActivate.size());
        }
    }

    /**
     * ACTIVE ‚Üí COMPLETED (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ endAt + 5 –º–∏–Ω—É—Ç grace period)
     */
    private void completeActiveCalls() {
        OffsetDateTime now = OffsetDateTime.now();
        OffsetDateTime gracePeriod = now.minusMinutes(5);
        
        List<Call> toComplete = callRepository.findByStatusAndEndAtBefore(
            CallStatus.ACTIVE,
            gracePeriod
        );
        
        for (Call call : toComplete) {
            call.setStatus(CallStatus.COMPLETED);
            callRepository.save(call);
            log.info("‚úÖ Call {} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: {}", call.getId(), call.getTitle());
        }
        
        if (toComplete.size() > 0) {
            log.info("üü° –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–≤–æ–Ω–∫–æ–≤: {}", toComplete.size());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
     */
    public boolean isTransitionAllowed(CallStatus from, CallStatus to) {
        return switch (from) {
            case SCHEDULED -> to == CallStatus.ACTIVE || to == CallStatus.CANCELLED;
            case ACTIVE -> to == CallStatus.COMPLETED || to == CallStatus.CANCELLED;
            case COMPLETED, CANCELLED -> false; // –§–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        };
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
     */
    public void updateStatus(Call call, CallStatus newStatus) {
        CallStatus currentStatus = call.getStatus();
        
        if (!isTransitionAllowed(currentStatus, newStatus)) {
            throw new IllegalStateException(
                String.format("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–µ—Ä–µ—Ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: %s ‚Üí %s", currentStatus, newStatus)
            );
        }
        
        call.setStatus(newStatus);
        callRepository.save(call);
        log.info("üìù –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ {} –∏–∑–º–µ–Ω–µ–Ω: {} ‚Üí {}", call.getId(), currentStatus, newStatus);
    }
}

