const rooms = new Map();
const raisedHands = new Map(); // Map<roomId, Set<socketId>> - –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–Ω—è—Ç—ã—Ö —Ä—É–∫
const Room = require('../models/Room');
const UserRoom = require('../models/UserRoom');
const ActiveConnection = require('../models/ActiveConnection');
const ChatMessage = require('../models/ChatMessage');
const { createClient } = require('redis');
const { createAdapter } = require('@socket.io/redis-adapter');

  const initializeWebRTCSignaling = (io) => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å–µ—Ä–≤–µ—Ä–∞–º–∏
  const redisUrl = process.env.REDIS_URL || 'redis://localhost:6379';
  
  console.log('üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis:', redisUrl.replace(/\/\/.*@/, '//***@')); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
  
  const pubClient = createClient({ url: redisUrl });
  const subClient = pubClient.duplicate();

  Promise.all([pubClient.connect(), subClient.connect()])
    .then(() => {
      io.adapter(createAdapter(pubClient, subClient));
      console.log('‚úÖ Redis adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Socket.IO');
    })
    .catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:', err);
      console.log('‚ö†Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Redis –∞–¥–∞–ø—Ç–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞)');
    });

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  setInterval(async () => {
    try {
      const allConnections = await ActiveConnection.find({ isActive: true });
      const deadConnections = [];
      
      for (const conn of allConnections) {
        const socket = io.sockets.sockets.get(conn.socketId);
        if (!socket) {
          deadConnections.push(conn._id);
        }
      }
      
      if (deadConnections.length > 0) {
        await ActiveConnection.deleteMany({ _id: { $in: deadConnections } });
        console.log(`üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ ${deadConnections.length} –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error);
    }
  }, 30000); // 30 —Å–µ–∫—É–Ω–¥

  io.on('connection', (socket) => {
    console.log('üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', socket.id);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç —ç—Ç–æ–≥–æ —Å–æ–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const originalEmit = socket.emit;
    socket.emit = function(event, ...args) {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${socket.id}: ${event}`, args.length > 0 ? args[0] : '');
      return originalEmit.apply(this, arguments);
    };
    
    const originalOn = socket.on;
    socket.on = function(event, handler) {
      console.log(`üì• –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ${socket.id}: ${event}`);
      return originalOn.call(this, event, (...args) => {
        console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç ${socket.id}: ${event}`, args.length > 0 ? args[0] : '');
        return handler.apply(this, args);
      });
    };

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    const joinTimeout = setTimeout(() => {
      console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç: ${socket.id} –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∑–∞ 10 —Å–µ–∫—É–Ω–¥`);
      socket.emit('join-timeout', { message: '–ù–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ' });
    }, 10000);

    socket.on('join-room', async ({ roomId, userData }) => {
      clearTimeout(joinTimeout); // –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–∞—É—Ç
      console.log(`${userData.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);

      try {
        // –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¢–ï–ö–£–©–ò–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
        // –ü–ï–†–ï–î —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        const currentConnections = await ActiveConnection.find({ 
          roomId: roomId 
        });
        
        console.log(`–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã ${roomId}:`, 
          currentConnections.map(c => `${c.username} (${c.socketId})`));

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ userId)
        const oldConnections = await ActiveConnection.find({ 
          userId: userData.userId,
          roomId: roomId 
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º user-left –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for (const oldConn of oldConnections) {
          if (oldConn.socketId !== socket.id) {
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é user-left –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${oldConn.socketId} (${oldConn.username})`);
            io.to(roomId).emit('user-left', { 
              socketId: oldConn.socketId,
              userId: oldConn.userId,
              username: oldConn.username
            });
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ in-memory –∫–∞—Ä—Ç—ã
            const roomParticipants = rooms.get(roomId);
            if (roomParticipants) {
              roomParticipants.delete(oldConn.socketId);
            }
          }
        }
        
        const deletedConnections = await ActiveConnection.deleteMany({ 
          userId: userData.userId,
          roomId: roomId 
        });
        
        if (deletedConnections.deletedCount > 0) {
          console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedConnections.deletedCount} —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è ${userData.username}`);
        }
        
        // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —ç—Ç–∏–º socketId (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫)
        const deletedSocketConnections = await ActiveConnection.deleteMany({ 
          socketId: socket.id
        });
        
        if (deletedSocketConnections.deletedCount > 0) {
          console.log(`–£–¥–∞–ª–µ–Ω–æ ${deletedSocketConnections.deletedCount} –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è socket ${socket.id}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —ç—Ç–∏–º socketId
        const existingConnection = await ActiveConnection.findOne({ 
          socketId: socket.id,
          roomId: roomId 
        });
        
        let connection;
        if (existingConnection) {
          console.log(`üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º: ${userData.username} (${socket.id}) –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
          connection = await ActiveConnection.findOneAndUpdate(
            { socketId: socket.id, roomId: roomId },
            { 
              userId: userData.userId,
              username: userData.username,
              mediaState: {
                camera: true,
                microphone: true,
                screen: false
              },
              lastSeen: new Date(),
              isActive: true
            },
            { new: true }
          );
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          connection = await ActiveConnection.create({
            socketId: socket.id,
            roomId: roomId,
            userId: userData.userId,
            username: userData.username,
            mediaState: {
              camera: true,
              microphone: true,
              screen: false
            },
            lastSeen: new Date(),
            isActive: true
          });
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ë–î: ${userData.username} (${socket.id}) –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        }

        // –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –≤ –ë–î
        let room = await Room.findOne({ roomId });
        let isNewRoom = false;
        
        if (!room) {
          console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î, —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏`);
          // –î–ª—è –≥–æ—Å—Ç–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º null –≤–º–µ—Å—Ç–æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ ObjectId
          const ownerIdValue = userData.userId === 'guest' || userData.userId.startsWith('guest-') 
            ? null 
            : userData.userId;
          
          room = await Room.create({
            roomId,
            name: `–ö–æ–º–Ω–∞—Ç–∞ ${roomId}`,
            ownerId: ownerIdValue,
            isStatic: true,
            customId: roomId
          });
          isNewRoom = true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤—è–∑—å —Å —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–æ–π
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –≥–æ—Å—Ç–µ–π, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∏—Ö –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ ObjectId
        if (userData.userId !== 'guest' && !userData.userId.startsWith('guest-')) {
          let userRoom = await UserRoom.findOne({ userId: userData.userId, roomId });
          
          if (!userRoom) {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å: owner –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–æ–≤–∞—è, member –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è
            const role = isNewRoom ? 'owner' : 'member';
            
            userRoom = await UserRoom.create({
              userId: userData.userId,
              roomId,
              role,
              customName: room.name,
            });
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å UserRoom: ${userData.username} ‚Üí ${roomId} (${role})`);
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º lastAccessed
            userRoom.lastAccessed = new Date();
            await userRoom.save();
          }
        } else {
          console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ UserRoom –¥–ª—è –≥–æ—Å—Ç—è: ${userData.username}`);
        }

        // –í–ê–ñ–ù–û: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ Socket.IO –∫–æ–º–Ω–∞—Ç–µ
        socket.join(roomId);

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º in-memory –∫–æ–º–Ω–∞—Ç—É
        if (!rooms.has(roomId)) {
          rooms.set(roomId, new Map());
        }
        
        const roomParticipants = rooms.get(roomId);
        
        // –û—á–∏—â–∞–µ–º in-memory –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for (const [sid, participant] of roomParticipants.entries()) {
          if (participant.userId === userData.userId && sid !== socket.id) {
            roomParticipants.delete(sid);
            console.log(`–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è in-memory –∑–∞–ø–∏—Å—å ${sid} –¥–ª—è ${userData.userId}`);
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        roomParticipants.set(socket.id, {
          socketId: socket.id,
          userId: userData.userId,
          username: userData.username,
          mediaState: connection.mediaState
        });

        // –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ë–î
        // –ù–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å–æ–∫–µ—Ç—ã —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        const existingConnections = await ActiveConnection.find({ 
          roomId: roomId,
          socketId: { $ne: socket.id }, // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          isActive: true // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å–æ–∫–µ—Ç—ã —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
        const activeParticipants = [];
        const deadConnections = [];
        
        for (const conn of existingConnections) {
          const targetSocket = io.sockets.sockets.get(conn.socketId);
          if (targetSocket) {
            // –°–æ–∫–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω
            activeParticipants.push({
              socketId: conn.socketId,
              userId: conn.userId,
              username: conn.username,
              mediaState: conn.mediaState
            });
          } else {
            // –°–æ–∫–µ—Ç –º–µ—Ä—Ç–≤, –ø–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            deadConnections.push(conn._id);
          }
        }
        
        // –£–¥–∞–ª—è–µ–º –º–µ—Ä—Ç–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ë–î
        if (deadConnections.length > 0) {
          await ActiveConnection.deleteMany({ _id: { $in: deadConnections } });
          console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deadConnections.length} –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –ë–î`);
        }
        
        console.log(`–ù–∞–π–¥–µ–Ω–æ ${activeParticipants.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        activeParticipants.forEach(p => {
          console.log(`  - ${p.username} (${p.socketId})`);
        });

        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${userData.username} —Å–ø–∏—Å–æ–∫ –∏–∑ ${activeParticipants.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–Ω—è—Ç—ã—Ö —Ä—É–∫ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
        const roomHands = raisedHands.get(roomId) || new Set();
        const raisedHandsArray = Array.from(roomHands);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (activeParticipants.length > 0) {
          socket.emit('existing-participants', {
            participants: activeParticipants,
            raisedHands: raisedHandsArray, // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ socketId —Å –ø–æ–¥–Ω—è—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏
          });
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
        try {
          const chatHistory = await ChatMessage.find({ roomId })
            .sort({ timestamp: -1 })
            .limit(100)
            .lean();
          
          if (chatHistory.length > 0) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            socket.emit('chat-history', {
              messages: chatHistory.reverse().map(msg => ({
                id: msg._id.toString(),
                senderId: msg.senderId,
                senderName: msg.senderName,
                message: msg.message,
                timestamp: msg.timestamp.getTime(),
                fileUrl: msg.fileUrl,
                fileName: msg.fileName,
                fileType: msg.fileType,
              })),
            });
            console.log(`üìú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞: ${chatHistory.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞:', error);
        }

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –î–†–£–ì–ò–• —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        socket.to(roomId).emit('user-joined', {
          participant: {
            socketId: socket.id,
            userId: userData.userId,
            username: userData.username,
            mediaState: connection.mediaState
          },
        });

        console.log(`‚úì ${userData.username} (${socket.id}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        console.log(`  –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–µ–π—á–∞—Å: ${activeParticipants.length + 1}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ –ë–î
        const savedConnection = await ActiveConnection.findOne({ socketId: socket.id });
        if (savedConnection) {
          console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${socket.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î`);
        } else {
          console.error(`‚ùå –û–®–ò–ë–ö–ê: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${socket.id} –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î!`);
        }

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∫–ª–∏–µ–Ω—Ç—É
        if (error.code === 11000) {
          console.log(`‚ö†Ô∏è –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${socket.id} - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
          return;
        }
        
        socket.emit('room-error', { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ' });
      }
    });

    socket.on('offer', ({ targetSocketId, offer, connectionType }) => {
      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ offer (${connectionType}) –æ—Ç ${socket.id} –∫ ${targetSocketId}`);
      const targetSocket = io.sockets.sockets.get(targetSocketId);
      if (targetSocket) {
        console.log(`‚úì –¶–µ–ª—å ${targetSocketId} –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º offer (${connectionType})`);
        targetSocket.emit('receive-offer', {
          from: socket.id,
          offer,
          connectionType,
        });
      } else {
        console.log(`‚úó –¶–µ–ª—å ${targetSocketId} –ù–ï –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª—Å—è)`);
        socket.emit('peer-unavailable', { targetSocketId });
      }
    });

    socket.on('answer', ({ targetSocketId, answer, connectionType }) => {
      console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ answer (${connectionType}) –æ—Ç ${socket.id} –∫ ${targetSocketId}`);
      const targetSocket = io.sockets.sockets.get(targetSocketId);
      if (targetSocket) {
        console.log(`‚úì –¶–µ–ª—å ${targetSocketId} –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º answer (${connectionType})`);
        targetSocket.emit('receive-answer', {
          from: socket.id,
          answer,
          connectionType,
        });
      } else {
        console.log(`‚úó –¶–µ–ª—å ${targetSocketId} –ù–ï –Ω–∞–π–¥–µ–Ω–∞`);
        socket.emit('peer-unavailable', { targetSocketId });
      }
    });

    socket.on('ice-candidate', ({ targetSocketId, candidate, connectionType }) => {
      const targetSocket = io.sockets.sockets.get(targetSocketId);
      if (targetSocket) {
        targetSocket.emit('receive-ice-candidate', {
          from: socket.id,
          candidate,
          connectionType,
        });
      }
    });

    socket.on('toggle-media', async ({ roomId, mediaType, enabled }) => {
      try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        await ActiveConnection.updateOne(
          { socketId: socket.id },
          { 
            [`mediaState.${mediaType}`]: enabled,
            lastSeen: new Date()
          }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º in-memory
        const roomParticipants = rooms.get(roomId);
        if (roomParticipants && roomParticipants.has(socket.id)) {
          const participant = roomParticipants.get(socket.id);
          participant.mediaState[mediaType] = enabled;
        }
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        socket.to(roomId).emit('media-toggled', {
          socketId: socket.id,
          mediaType,
          enabled,
        });

        console.log(`${socket.id} –ø–µ—Ä–µ–∫–ª—é—á–∏–ª ${mediaType}: ${enabled}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ toggle-media:', error);
      }
    });

    socket.on('screen-share-started', ({ roomId, screenStreamId }) => {
      console.log(`Screen share STARTED –æ—Ç ${socket.id}, streamId: ${screenStreamId}`);
      
      const roomParticipants = rooms.get(roomId);
      if (roomParticipants && roomParticipants.has(socket.id)) {
        const participant = roomParticipants.get(socket.id);
        participant.screenStreamId = screenStreamId;
      }
      
      socket.to(roomId).emit('screen-share-started', {
        socketId: socket.id,
        screenStreamId,
      });
    });

    socket.on('screen-share-stopped', ({ roomId }) => {
      console.log(`Screen share STOPPED –æ—Ç ${socket.id}`);
      
      const roomParticipants = rooms.get(roomId);
      if (roomParticipants && roomParticipants.has(socket.id)) {
        const participant = roomParticipants.get(socket.id);
        delete participant.screenStreamId;
      }
      
      socket.to(roomId).emit('screen-share-stopped', {
        socketId: socket.id,
      });
    });

    // –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: –∑–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
    socket.on('request-room-participants', async ({ roomId }) => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –ë–î, –Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        const existingConnections = await ActiveConnection.find({ 
          roomId: roomId,
          socketId: { $ne: socket.id }, // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          isActive: true // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        });
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–∫–µ—Ç—ã
        const activeParticipants = [];
        for (const conn of existingConnections) {
          const targetSocket = io.sockets.sockets.get(conn.socketId);
          if (targetSocket) {
            activeParticipants.push({
              socketId: conn.socketId,
              userId: conn.userId,
              username: conn.username,
              mediaState: conn.mediaState
            });
          }
        }
        
        socket.emit('room-participants-list', { participants: activeParticipants });
        console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è ${socket.id}: ${activeParticipants.length}`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', error);
      }
    });

    socket.on('leave-room', async ({ roomId }) => {
      await handleUserDisconnect(socket, roomId);
    });

    // –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    socket.on('chat-message', async ({ roomId, message, timestamp, file }) => {
      try {
        console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –æ—Ç ${socket.id} –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}:`, message, file ? `—Å —Ñ–∞–π–ª–æ–º ${file.name}` : '');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        const connection = await ActiveConnection.findOne({ socketId: socket.id, roomId });
        
        if (!connection) {
          console.error('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è');
          return;
        }

        let fileUrl = null;
        let fileName = null;
        let fileType = null;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (file && file.data) {
          try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –æ–±—Ä–∞—Ç–Ω–æ –≤ data URL –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∫–ª–∏–µ–Ω—Ç–∞–º
            fileUrl = `data:${file.type};base64,${file.data}`;
            fileName = file.name;
            fileType = file.type;
            console.log(`üìé –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${fileName} (${fileType})`);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
          }
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        const savedMessage = await ChatMessage.create({
          roomId,
          senderId: socket.id,
          senderName: connection.username,
          message: message || '',
          fileUrl,
          fileName,
          fileType,
          timestamp: new Date(timestamp),
        });
        
        console.log(`üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${savedMessage._id}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ (–≤–∫–ª—é—á–∞—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
        io.to(roomId).emit('chat-message', {
          id: savedMessage._id.toString(),
          senderId: socket.id,
          senderName: connection.username,
          message: message || '',
          timestamp,
          fileUrl,
          fileName,
          fileType,
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞:', error);
      }
    });

    // –ü–æ–¥–Ω—è—Ç–∏–µ —Ä—É–∫–∏
    socket.on('raise-hand', ({ roomId, isRaised }) => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–Ω—è—Ç—ã—Ö —Ä—É–∫
      if (!raisedHands.has(roomId)) {
        raisedHands.set(roomId, new Set());
      }
      const roomHands = raisedHands.get(roomId);
      
      if (isRaised) {
        roomHands.add(socket.id);
      } else {
        roomHands.delete(socket.id);
      }
      
      // –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–Ω—è—Ç–æ–π —Ä—É–∫–∏ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
      socket.to(roomId).emit('hand-raised', {
        socketId: socket.id,
        isRaised,
      });
      console.log(`‚úã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} ${isRaised ? '–ø–æ–¥–Ω—è–ª' : '–æ–ø—É—Å—Ç–∏–ª'} —Ä—É–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–≤–æ—Ä–µ–Ω–∏—è
    socket.on('speaking-state', ({ roomId, isSpeaking }) => {
      // –¢—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–≤–æ—Ä–µ–Ω–∏—è –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
      socket.to(roomId).emit('speaking-state-update', {
        socketId: socket.id,
        isSpeaking,
      });
    });

    socket.on('disconnect', async (reason) => {
      clearTimeout(joinTimeout); // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      console.log('üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', socket.id, '–ü—Ä–∏—á–∏–Ω–∞:', reason);
      console.log('   Transport:', socket.conn?.transport?.name || 'unknown');

      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–Ω–∞—Ç—ã, –≥–¥–µ –±—ã–ª —ç—Ç–æ—Ç socket
      const userConnections = await ActiveConnection.find({ socketId: socket.id });
      
      for (const conn of userConnections) {
        await handleUserDisconnect(socket, conn.roomId);
      }

      // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º in-memory –∫–æ–º–Ω–∞—Ç—ã
      for (const [roomId, participants] of rooms.entries()) {
        if (participants.has(socket.id)) {
          await handleUserDisconnect(socket, roomId);
        }
      }
    });
  });

  const handleUserDisconnect = async (socket, roomId) => {
    try {
      console.log(`üîå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${socket.id} –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
      
      // –ù–ï —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É –∏–∑ –ë–î - –¥–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      // –ü–æ–º–µ—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ë–î –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
      const updatedConn = await ActiveConnection.findOneAndUpdate(
        { socketId: socket.id, roomId: roomId },
        { 
          lastSeen: new Date(),
          isActive: false // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        },
        { new: true }
      );
      
      if (updatedConn) {
        console.log(`‚è∏Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${socket.id} (${updatedConn.username}) –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è
        setTimeout(async () => {
          const stillInactive = await ActiveConnection.findOne({ 
            socketId: socket.id, 
            roomId: roomId,
            isActive: false 
          });
          
          if (stillInactive) {
            await ActiveConnection.findOneAndDelete({ 
              socketId: socket.id,
              roomId: roomId 
            });
            console.log(`üóëÔ∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${socket.id} (${updatedConn.username}) –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
          } else {
            console.log(`üîÑ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${socket.id} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å, –Ω–µ —É–¥–∞–ª—è–µ–º`);
          }
        }, 30000); // 30 —Å–µ–∫—É–Ω–¥
        
      } else {
        console.log(`‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ${socket.id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`);
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–Ω—è—Ç—ã—Ö —Ä—É–∫
      const roomHands = raisedHands.get(roomId);
      if (roomHands) {
        roomHands.delete(socket.id);
        if (roomHands.size === 0) {
          raisedHands.delete(roomId);
        }
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ in-memory
      const roomParticipants = rooms.get(roomId);
      if (roomParticipants) {
        roomParticipants.delete(socket.id);
        
        // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –ø–∞–º—è—Ç–∏
        if (roomParticipants.size === 0) {
          rooms.delete(roomId);
          console.log(`–ö–æ–º–Ω–∞—Ç–∞ ${roomId} –ø—É—Å—Ç–∞, —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–∞–º—è—Ç–∏`);
        }
      }
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      socket.to(roomId).emit('user-left', {
        socketId: socket.id,
      });

      socket.leave(roomId);

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
      const remainingCount = await ActiveConnection.countDocuments({ roomId });
      console.log(`–£—á–∞—Å—Ç–Ω–∏–∫ ${socket.id} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}. –û—Å—Ç–∞–ª–æ—Å—å: ${remainingCount}`);
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  };
};

module.exports = initializeWebRTCSignaling;